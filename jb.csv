"HelpUri","ScriptBlock","CmdletBinding","DefaultParameterSet","Definition","Options","Description","Verb","Noun","HelpFile","OutputType","Name","CommandType","Source","Version","Visibility","ModuleName","Module","RemotingCapability","Parameters","ParameterSets"
"","Set-Location ..","False",,"Set-Location ..","None",,"","",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","cd..","Function","",,"Public","",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"","Set-Location \","False",,"Set-Location \","None",,"","",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","cd\","Function","",,"Public","",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"","
    [Alias('cls')]
    param()

    __clearhost
    if ($host.Runspace.LanguageMode -eq [System.Management.Automation.PSLanguageMode]::FullLanguage) {
        $psEditor.Window.Terminal.Clear()
    }
","False",,"
    [Alias('cls')]
    param()

    __clearhost
    if ($host.Runspace.LanguageMode -eq [System.Management.Automation.PSLanguageMode]::FullLanguage) {
        $psEditor.Window.Terminal.Clear()
    }
","None",,"Clear","Host",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Clear-Host","Function","PowerShellEditorServices.Commands","0.2.0","Public","PowerShellEditorServices.Commands","PowerShellEditorServices.Commands","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"","","False",,"","None",,"Compress","Archive",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Compress-Archive","Function","Microsoft.PowerShell.Archive","1.2.5","Public","Microsoft.PowerShell.Archive","Microsoft.PowerShell.Archive","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"","","False",,"","None",,"","",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Configuration","Function","PSDesiredStateConfiguration","2.0.5","Public","PSDesiredStateConfiguration","PSDesiredStateConfiguration","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://github.com/PowerShell/PowerShellEditorServices/tree/master/module/docs/ConvertFrom-ScriptExtent.md","
    <#
    .EXTERNALHELP ..\PowerShellEditorServices.Commands-help.xml
    #>
    [CmdletBinding()]
    [OutputType([Microsoft.PowerShell.EditorServices.Extensions.IFileRange, Microsoft.PowerShell.EditorServices],    ParameterSetName='BufferRange')]
    [OutputType([Microsoft.PowerShell.EditorServices.Extensions.IFilePosition, Microsoft.PowerShell.EditorServices], ParameterSetName='BufferPosition')]
    param(
        [Parameter(Mandatory, ValueFromPipeline, ValueFromPipelineByPropertyName)]
        [ValidateNotNullOrEmpty()]
        [System.Management.Automation.Language.IScriptExtent[]]
        $Extent,

        [Parameter(ParameterSetName='BufferRange')]
        [switch]
        $BufferRange,

        [Parameter(ParameterSetName='BufferPosition')]
        [switch]
        $BufferPosition,

        [Parameter(ParameterSetName='BufferPosition')]
        [switch]
        $Start,

        [Parameter(ParameterSetName='BufferPosition')]
        [switch]
        $End
    )
    process {
        foreach ($aExtent in $Extent) {
            switch ($PSCmdlet.ParameterSetName) {
                BufferRange {
                    # yield
                    [Microsoft.PowerShell.EditorServices.Extensions.FileRange, Microsoft.PowerShell.EditorServices]::new(
                        $aExtent.StartLineNumber,
                        $aExtent.StartColumnNumber,
                        $aExtent.EndLineNumber,
                        $aExtent.EndColumnNumber)
                }
                BufferPosition {
                    if ($End) {
                        $line   = $aExtent.EndLineNumber
                        $column = $aExtent.EndLineNumber
                    } else {
                        $line   = $aExtent.StartLineNumber
                        $column = $aExtent.StartLineNumber
                    }
                    # yield
                    [Microsoft.PowerShell.EditorServices.Extensions.FileRange, Microsoft.PowerShell.EditorServices]::new(
                        $line,
                        $column)
                }
            }
        }
    }
","True",,"
    <#
    .EXTERNALHELP ..\PowerShellEditorServices.Commands-help.xml
    #>
    [CmdletBinding()]
    [OutputType([Microsoft.PowerShell.EditorServices.Extensions.IFileRange, Microsoft.PowerShell.EditorServices],    ParameterSetName='BufferRange')]
    [OutputType([Microsoft.PowerShell.EditorServices.Extensions.IFilePosition, Microsoft.PowerShell.EditorServices], ParameterSetName='BufferPosition')]
    param(
        [Parameter(Mandatory, ValueFromPipeline, ValueFromPipelineByPropertyName)]
        [ValidateNotNullOrEmpty()]
        [System.Management.Automation.Language.IScriptExtent[]]
        $Extent,

        [Parameter(ParameterSetName='BufferRange')]
        [switch]
        $BufferRange,

        [Parameter(ParameterSetName='BufferPosition')]
        [switch]
        $BufferPosition,

        [Parameter(ParameterSetName='BufferPosition')]
        [switch]
        $Start,

        [Parameter(ParameterSetName='BufferPosition')]
        [switch]
        $End
    )
    process {
        foreach ($aExtent in $Extent) {
            switch ($PSCmdlet.ParameterSetName) {
                BufferRange {
                    # yield
                    [Microsoft.PowerShell.EditorServices.Extensions.FileRange, Microsoft.PowerShell.EditorServices]::new(
                        $aExtent.StartLineNumber,
                        $aExtent.StartColumnNumber,
                        $aExtent.EndLineNumber,
                        $aExtent.EndColumnNumber)
                }
                BufferPosition {
                    if ($End) {
                        $line   = $aExtent.EndLineNumber
                        $column = $aExtent.EndLineNumber
                    } else {
                        $line   = $aExtent.StartLineNumber
                        $column = $aExtent.StartLineNumber
                    }
                    # yield
                    [Microsoft.PowerShell.EditorServices.Extensions.FileRange, Microsoft.PowerShell.EditorServices]::new(
                        $line,
                        $column)
                }
            }
        }
    }
","None",,"ConvertFrom","ScriptExtent",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","ConvertFrom-ScriptExtent","Function","PowerShellEditorServices.Commands","0.2.0","Public","PowerShellEditorServices.Commands","PowerShellEditorServices.Commands","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://github.com/PowerShell/PowerShellEditorServices/tree/master/module/docs/ConvertTo-ScriptExtent.md","
    <#
    .EXTERNALHELP ..\PowerShellEditorServices.Commands-help.xml
    #>
    [CmdletBinding()]
    [OutputType([System.Management.Automation.Language.IScriptExtent])]
    param(
        [Parameter(Mandatory, ValueFromPipelineByPropertyName, ParameterSetName='ByOffset')]
        [Alias('StartOffset', 'Offset')]
        [int]
        $StartOffsetNumber,

        [Parameter(ValueFromPipelineByPropertyName, ParameterSetName='ByOffset')]
        [Alias('EndOffset')]
        [int]
        $EndOffsetNumber,

        [Parameter(ValueFromPipelineByPropertyName, ParameterSetName='ByPosition')]
        [Alias('StartLine', 'Line')]
        [int]
        $StartLineNumber,

        [Parameter(ValueFromPipelineByPropertyName, ParameterSetName='ByPosition')]
        [Alias('StartColumn', 'Column')]
        [int]
        $StartColumnNumber,

        [Parameter(ValueFromPipelineByPropertyName, ParameterSetName='ByPosition')]
        [Alias('EndLine')]
        [int]
        $EndLineNumber,

        [Parameter(ValueFromPipelineByPropertyName, ParameterSetName='ByPosition')]
        [Alias('EndColumn')]
        [int]
        $EndColumnNumber,

        [Parameter(ValueFromPipelineByPropertyName, ParameterSetName='ByPosition')]
        [Parameter(ValueFromPipelineByPropertyName, ParameterSetName='ByOffset')]
        [Parameter(ValueFromPipelineByPropertyName, ParameterSetName='ByBuffer')]
        [Alias('File', 'FileName')]
        [string]
        $FilePath = $psEditor.GetEditorContext().CurrentFile.Path,

        [Parameter(ValueFromPipelineByPropertyName, ParameterSetName='ByBuffer')]
        [Alias('Start')]
        [Microsoft.PowerShell.EditorServices.Extensions.IFilePosition, Microsoft.PowerShell.EditorServices]
        $StartBuffer,

        [Parameter(ValueFromPipelineByPropertyName, ParameterSetName='ByBuffer')]
        [Alias('End')]
        [Microsoft.PowerShell.EditorServices.Extensions.IFilePosition, Microsoft.PowerShell.EditorServices]
        $EndBuffer,

        [Parameter(Mandatory,
                   ValueFromPipeline,
                   ValueFromPipelineByPropertyName,
                   ParameterSetName='ByExtent')]
        [System.Management.Automation.Language.IScriptExtent]
        $Extent
    )
    begin {
        $fileContext = $psEditor.GetEditorContext().CurrentFile
        $emptyExtent = [Microsoft.PowerShell.EditorServices.Extensions.FileScriptExtent, Microsoft.PowerShell.EditorServices]::Empty
    }

    process {
        # Already a InternalScriptExtent, FileScriptExtent or is empty.
        $returnAsIs = $Extent -and
                     (0 -ne $Extent.StartOffset   -or
                      0 -ne $Extent.EndOffset     -or
                      $Extent -eq $emptyExtent)

        if ($returnAsIs) { return $Extent }

        if ($StartOffsetNumber) {
            $startOffset = $StartOffsetNumber
            $endOffset   = $EndOffsetNumber

            # Allow creating a single position extent with just the offset parameter.
            if (-not $EndOffsetNumber) {
                $endOffset = $startOffset
            }

            return [Microsoft.PowerShell.EditorServices.Extensions.FileScriptExtent, Microsoft.PowerShell.EditorServices]::FromOffsets(
                $fileContext,
                $startOffset,
                $endOffset)
        }

        if ($StartBuffer) {
            if (-not $EndBuffer)
            {
                $EndBuffer = $StartBuffer
            }

            return [Microsoft.PowerShell.EditorServices.Extensions.FileScriptExtent, Microsoft.PowerShell.EditorServices]::FromPositions(
                $fileContext,
                $StartBuffer.Line,
                $StartBuffer.Column,
                $EndBuffer.Line,
                $EndBuffer.Column)
        }

        if (-not $StartColumnNumber) { $StartColumnNumber = 1 }
        if (-not $StartLineNumber)   { $StartLineNumber   = 1 }
        if (-not $EndLineNumber)     { $EndLineNumber     = 1 }
        if (-not $EndColumnNumber)   { $EndColumnNumber   = 1 }

        return [Microsoft.PowerShell.EditorServices.Extensions.FileScriptExtent, Microsoft.PowerShell.EditorServices]::FromPositions(
            $StartLineNumber,
            $StartColumnNumber,
            $EndLineNumber,
            $EndColumnNumber)
    }
","True",,"
    <#
    .EXTERNALHELP ..\PowerShellEditorServices.Commands-help.xml
    #>
    [CmdletBinding()]
    [OutputType([System.Management.Automation.Language.IScriptExtent])]
    param(
        [Parameter(Mandatory, ValueFromPipelineByPropertyName, ParameterSetName='ByOffset')]
        [Alias('StartOffset', 'Offset')]
        [int]
        $StartOffsetNumber,

        [Parameter(ValueFromPipelineByPropertyName, ParameterSetName='ByOffset')]
        [Alias('EndOffset')]
        [int]
        $EndOffsetNumber,

        [Parameter(ValueFromPipelineByPropertyName, ParameterSetName='ByPosition')]
        [Alias('StartLine', 'Line')]
        [int]
        $StartLineNumber,

        [Parameter(ValueFromPipelineByPropertyName, ParameterSetName='ByPosition')]
        [Alias('StartColumn', 'Column')]
        [int]
        $StartColumnNumber,

        [Parameter(ValueFromPipelineByPropertyName, ParameterSetName='ByPosition')]
        [Alias('EndLine')]
        [int]
        $EndLineNumber,

        [Parameter(ValueFromPipelineByPropertyName, ParameterSetName='ByPosition')]
        [Alias('EndColumn')]
        [int]
        $EndColumnNumber,

        [Parameter(ValueFromPipelineByPropertyName, ParameterSetName='ByPosition')]
        [Parameter(ValueFromPipelineByPropertyName, ParameterSetName='ByOffset')]
        [Parameter(ValueFromPipelineByPropertyName, ParameterSetName='ByBuffer')]
        [Alias('File', 'FileName')]
        [string]
        $FilePath = $psEditor.GetEditorContext().CurrentFile.Path,

        [Parameter(ValueFromPipelineByPropertyName, ParameterSetName='ByBuffer')]
        [Alias('Start')]
        [Microsoft.PowerShell.EditorServices.Extensions.IFilePosition, Microsoft.PowerShell.EditorServices]
        $StartBuffer,

        [Parameter(ValueFromPipelineByPropertyName, ParameterSetName='ByBuffer')]
        [Alias('End')]
        [Microsoft.PowerShell.EditorServices.Extensions.IFilePosition, Microsoft.PowerShell.EditorServices]
        $EndBuffer,

        [Parameter(Mandatory,
                   ValueFromPipeline,
                   ValueFromPipelineByPropertyName,
                   ParameterSetName='ByExtent')]
        [System.Management.Automation.Language.IScriptExtent]
        $Extent
    )
    begin {
        $fileContext = $psEditor.GetEditorContext().CurrentFile
        $emptyExtent = [Microsoft.PowerShell.EditorServices.Extensions.FileScriptExtent, Microsoft.PowerShell.EditorServices]::Empty
    }

    process {
        # Already a InternalScriptExtent, FileScriptExtent or is empty.
        $returnAsIs = $Extent -and
                     (0 -ne $Extent.StartOffset   -or
                      0 -ne $Extent.EndOffset     -or
                      $Extent -eq $emptyExtent)

        if ($returnAsIs) { return $Extent }

        if ($StartOffsetNumber) {
            $startOffset = $StartOffsetNumber
            $endOffset   = $EndOffsetNumber

            # Allow creating a single position extent with just the offset parameter.
            if (-not $EndOffsetNumber) {
                $endOffset = $startOffset
            }

            return [Microsoft.PowerShell.EditorServices.Extensions.FileScriptExtent, Microsoft.PowerShell.EditorServices]::FromOffsets(
                $fileContext,
                $startOffset,
                $endOffset)
        }

        if ($StartBuffer) {
            if (-not $EndBuffer)
            {
                $EndBuffer = $StartBuffer
            }

            return [Microsoft.PowerShell.EditorServices.Extensions.FileScriptExtent, Microsoft.PowerShell.EditorServices]::FromPositions(
                $fileContext,
                $StartBuffer.Line,
                $StartBuffer.Column,
                $EndBuffer.Line,
                $EndBuffer.Column)
        }

        if (-not $StartColumnNumber) { $StartColumnNumber = 1 }
        if (-not $StartLineNumber)   { $StartLineNumber   = 1 }
        if (-not $EndLineNumber)     { $EndLineNumber     = 1 }
        if (-not $EndColumnNumber)   { $EndColumnNumber   = 1 }

        return [Microsoft.PowerShell.EditorServices.Extensions.FileScriptExtent, Microsoft.PowerShell.EditorServices]::FromPositions(
            $StartLineNumber,
            $StartColumnNumber,
            $EndLineNumber,
            $EndColumnNumber)
    }
","None",,"ConvertTo","ScriptExtent",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","ConvertTo-ScriptExtent","Function","PowerShellEditorServices.Commands","0.2.0","Public","PowerShellEditorServices.Commands","PowerShellEditorServices.Commands","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"","","False",,"","None",,"Expand","Archive",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Expand-Archive","Function","Microsoft.PowerShell.Archive","1.2.5","Public","Microsoft.PowerShell.Archive","Microsoft.PowerShell.Archive","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://github.com/PowerShell/PowerShellEditorServices/tree/master/module/docs/Find-Ast.md","
    <#
    .EXTERNALHELP ..\PowerShellEditorServices.Commands-help.xml
    #>
    [CmdletBinding(PositionalBinding=$false, DefaultParameterSetName='FilterScript')]
    param(
        [Parameter(Position=0, ParameterSetName='FilterScript')]
        [ValidateNotNullOrEmpty()]
        [scriptblock]
        $FilterScript = { $true },

        [Parameter(ValueFromPipeline, ValueFromPipelineByPropertyName, ParameterSetName='FilterScript')]
        [ValidateNotNullOrEmpty()]
        [System.Management.Automation.Language.Ast]
        $Ast,

        [Parameter(ParameterSetName='FilterScript')]
        [switch]
        $Before,

        [Parameter(ParameterSetName='FilterScript')]
        [switch]
        $Family,

        [Parameter(ParameterSetName='FilterScript')]
        [Alias('Closest', 'F')]
        [switch]
        $First,

        [Parameter(ParameterSetName='FilterScript')]
        [Alias('Furthest')]
        [switch]
        $Last,

        [Parameter(ParameterSetName='FilterScript')]
        [Alias('Parent')]
        [switch]
        $Ancestor,

        [Parameter(ParameterSetName='FilterScript')]
        [switch]
        $IncludeStartingAst,

        [Parameter(ParameterSetName='AtCursor')]
        [switch]
        $AtCursor
    )
    begin {
        # InvokeWithContext method is PS4+, but it's significantly faster for large files.
        if ($PSVersionTable.PSVersion.Major -ge 4) {

            $variableType = [System.Management.Automation.PSVariable]
            function InvokeWithContext {
                param([scriptblock]$Filter, [System.Management.Automation.Language.Ast]$DollarUnder)

                return $Filter.InvokeWithContext(
                        <# functionsToDefine: #> $null,
                        <# variablesToDefine: #> [Activator]::CreateInstance($variableType, @('_', $DollarUnder)),
                        <# args:              #> $aAst)
            }
        } else {
            $FilterScript = [scriptblock]::Create($FilterScript.ToString())
            function InvokeWithContext {
                param([scriptblock]$Filter, [System.Management.Automation.Language.Ast]$DollarUnder)

                return $DollarUnder | & { process { $Filter.InvokeReturnAsIs($DollarUnder) } }
            }
        }
        # Get all children or ancestors.
        function GetAllFamily {
            param($Start)

            if ($Before.IsPresent) {
                $parent = $Start
                for ($parent; $parent = $parent.Parent) { $parent }
                return
            }
            return $Start.FindAll({ $true }, $true)
        }
        # Get all asts regardless of structure, in either direction from the starting ast.
        function GetAllAsts {
            param($Start)

            $predicate = [Func[System.Management.Automation.Language.Ast,bool]]{
                $args[0] -ne $Ast
            }

            $topParent = Find-Ast -Ast $Start -Ancestor -Last -IncludeStartingAst
            if (-not $topParent) { $topParent = $Start }

            if ($Before.IsPresent) {
                # Need to store so we can reverse the collection.
                $result = [Linq.Enumerable]::TakeWhile(
                    $topParent.FindAll({ $true }, $true),
                    $predicate) -as [System.Management.Automation.Language.Ast[]]

                [array]::Reverse($result)
                return $result
            }
            return [Linq.Enumerable]::SkipWhile(
                $topParent.FindAll({ $true }, $true),
                $predicate)
        }
    }
    process {
        if ($Ancestor.IsPresent) {
            $Family = $Before = $true
        }
        $context = $psEditor.GetEditorContext()

        if (-not $Ast -and $context) {
            $Ast = $context.CurrentFile.Ast
        }
        switch ($PSCmdlet.ParameterSetName) {
            AtCursor {
                $cursorLine     = $context.CursorPosition.Line - 1
                $cursorColumn   = $context.CursorPosition.Column - 1
                $cursorOffset   = $Ast.Extent.Text |
                    Select-String ""(.*\r?\n){$cursorLine}.{$cursorColumn}"" |
                    ForEach-Object { $PSItem.Matches.Value.Length }

                # yield
                Find-Ast -Last {
                    $cursorOffset -ge $PSItem.Extent.StartOffset -and
                    $cursorOffset -le $PSItem.Extent.EndOffset
                }
            }
            FilterScript {
                if (-not $Ast) { return }

                # Check if we're trying to get the top level ancestor when we're already there.
                if ($Before.IsPresent -and
                    $Family.IsPresent -and
                    $Last.IsPresent   -and -not
                    $Ast.Parent       -and
                    $Ast -is [System.Management.Automation.Language.ScriptBlockAst])
                    { return $Ast }

                if ($Family.IsPresent) {
                    $asts = GetAllFamily $Ast
                } else {
                    $asts = GetAllAsts $Ast
                }
                # Check the first ast to see if it's our starting ast, unless
                $checkFirstAst = -not $IncludeStartingAst
                foreach ($aAst in $asts) {
                    if ($checkFirstAst) {
                        if ($aAst -eq $Ast) {
                            $checkFirstAst = $false
                            continue
                        }
                    }
                    $shouldReturn = InvokeWithContext $FilterScript $aAst

                    if (-not $shouldReturn) { continue }

                    # Return first, last, both, or all depending on the combination of switches.
                    if (-not $Last.IsPresent) {
                        $aAst # yield
                        if ($First.IsPresent) { break }
                    } else {
                        $lastMatch = $aAst
                        if ($First.IsPresent) {
                            $aAst # yield
                            $First = $false
                        }
                    }
                }
                # yield
                if ($Last.IsPresent) { return $lastMatch }
            }
        }
    }
","True","FilterScript","
    <#
    .EXTERNALHELP ..\PowerShellEditorServices.Commands-help.xml
    #>
    [CmdletBinding(PositionalBinding=$false, DefaultParameterSetName='FilterScript')]
    param(
        [Parameter(Position=0, ParameterSetName='FilterScript')]
        [ValidateNotNullOrEmpty()]
        [scriptblock]
        $FilterScript = { $true },

        [Parameter(ValueFromPipeline, ValueFromPipelineByPropertyName, ParameterSetName='FilterScript')]
        [ValidateNotNullOrEmpty()]
        [System.Management.Automation.Language.Ast]
        $Ast,

        [Parameter(ParameterSetName='FilterScript')]
        [switch]
        $Before,

        [Parameter(ParameterSetName='FilterScript')]
        [switch]
        $Family,

        [Parameter(ParameterSetName='FilterScript')]
        [Alias('Closest', 'F')]
        [switch]
        $First,

        [Parameter(ParameterSetName='FilterScript')]
        [Alias('Furthest')]
        [switch]
        $Last,

        [Parameter(ParameterSetName='FilterScript')]
        [Alias('Parent')]
        [switch]
        $Ancestor,

        [Parameter(ParameterSetName='FilterScript')]
        [switch]
        $IncludeStartingAst,

        [Parameter(ParameterSetName='AtCursor')]
        [switch]
        $AtCursor
    )
    begin {
        # InvokeWithContext method is PS4+, but it's significantly faster for large files.
        if ($PSVersionTable.PSVersion.Major -ge 4) {

            $variableType = [System.Management.Automation.PSVariable]
            function InvokeWithContext {
                param([scriptblock]$Filter, [System.Management.Automation.Language.Ast]$DollarUnder)

                return $Filter.InvokeWithContext(
                        <# functionsToDefine: #> $null,
                        <# variablesToDefine: #> [Activator]::CreateInstance($variableType, @('_', $DollarUnder)),
                        <# args:              #> $aAst)
            }
        } else {
            $FilterScript = [scriptblock]::Create($FilterScript.ToString())
            function InvokeWithContext {
                param([scriptblock]$Filter, [System.Management.Automation.Language.Ast]$DollarUnder)

                return $DollarUnder | & { process { $Filter.InvokeReturnAsIs($DollarUnder) } }
            }
        }
        # Get all children or ancestors.
        function GetAllFamily {
            param($Start)

            if ($Before.IsPresent) {
                $parent = $Start
                for ($parent; $parent = $parent.Parent) { $parent }
                return
            }
            return $Start.FindAll({ $true }, $true)
        }
        # Get all asts regardless of structure, in either direction from the starting ast.
        function GetAllAsts {
            param($Start)

            $predicate = [Func[System.Management.Automation.Language.Ast,bool]]{
                $args[0] -ne $Ast
            }

            $topParent = Find-Ast -Ast $Start -Ancestor -Last -IncludeStartingAst
            if (-not $topParent) { $topParent = $Start }

            if ($Before.IsPresent) {
                # Need to store so we can reverse the collection.
                $result = [Linq.Enumerable]::TakeWhile(
                    $topParent.FindAll({ $true }, $true),
                    $predicate) -as [System.Management.Automation.Language.Ast[]]

                [array]::Reverse($result)
                return $result
            }
            return [Linq.Enumerable]::SkipWhile(
                $topParent.FindAll({ $true }, $true),
                $predicate)
        }
    }
    process {
        if ($Ancestor.IsPresent) {
            $Family = $Before = $true
        }
        $context = $psEditor.GetEditorContext()

        if (-not $Ast -and $context) {
            $Ast = $context.CurrentFile.Ast
        }
        switch ($PSCmdlet.ParameterSetName) {
            AtCursor {
                $cursorLine     = $context.CursorPosition.Line - 1
                $cursorColumn   = $context.CursorPosition.Column - 1
                $cursorOffset   = $Ast.Extent.Text |
                    Select-String ""(.*\r?\n){$cursorLine}.{$cursorColumn}"" |
                    ForEach-Object { $PSItem.Matches.Value.Length }

                # yield
                Find-Ast -Last {
                    $cursorOffset -ge $PSItem.Extent.StartOffset -and
                    $cursorOffset -le $PSItem.Extent.EndOffset
                }
            }
            FilterScript {
                if (-not $Ast) { return }

                # Check if we're trying to get the top level ancestor when we're already there.
                if ($Before.IsPresent -and
                    $Family.IsPresent -and
                    $Last.IsPresent   -and -not
                    $Ast.Parent       -and
                    $Ast -is [System.Management.Automation.Language.ScriptBlockAst])
                    { return $Ast }

                if ($Family.IsPresent) {
                    $asts = GetAllFamily $Ast
                } else {
                    $asts = GetAllAsts $Ast
                }
                # Check the first ast to see if it's our starting ast, unless
                $checkFirstAst = -not $IncludeStartingAst
                foreach ($aAst in $asts) {
                    if ($checkFirstAst) {
                        if ($aAst -eq $Ast) {
                            $checkFirstAst = $false
                            continue
                        }
                    }
                    $shouldReturn = InvokeWithContext $FilterScript $aAst

                    if (-not $shouldReturn) { continue }

                    # Return first, last, both, or all depending on the combination of switches.
                    if (-not $Last.IsPresent) {
                        $aAst # yield
                        if ($First.IsPresent) { break }
                    } else {
                        $lastMatch = $aAst
                        if ($First.IsPresent) {
                            $aAst # yield
                            $First = $false
                        }
                    }
                }
                # yield
                if ($Last.IsPresent) { return $lastMatch }
            }
        }
    }
","None",,"Find","Ast",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Find-Ast","Function","PowerShellEditorServices.Commands","0.2.0","Public","PowerShellEditorServices.Commands","PowerShellEditorServices.Commands","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"","","False",,"","None",,"Find","Command",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Find-Command","Function","PowerShellGet","2.2.5","Public","PowerShellGet","PowerShellGet","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"","","False",,"","None",,"Find","DSCResource",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Find-DSCResource","Function","PowerShellGet","2.2.5","Public","PowerShellGet","PowerShellGet","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"","","False",,"","None",,"Find","Module",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Find-Module","Function","PowerShellGet","2.2.5","Public","PowerShellGet","PowerShellGet","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"","","False",,"","None",,"Find","RoleCapability",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Find-RoleCapability","Function","PowerShellGet","2.2.5","Public","PowerShellGet","PowerShellGet","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"","","False",,"","None",,"Find","Script",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Find-Script","Function","PowerShellGet","2.2.5","Public","PowerShellGet","PowerShellGet","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"","","False",,"","None",,"Get","CredsFromCredentialProvider",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-CredsFromCredentialProvider","Function","PowerShellGet","2.2.5","Public","PowerShellGet","PowerShellGet","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"","","False",,"","None",,"Get","DscResource",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-DscResource","Function","PSDesiredStateConfiguration","2.0.5","Public","PSDesiredStateConfiguration","PSDesiredStateConfiguration","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"","","False",,"","None",,"Get","InstalledModule",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-InstalledModule","Function","PowerShellGet","2.2.5","Public","PowerShellGet","PowerShellGet","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"","","False",,"","None",,"Get","InstalledScript",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-InstalledScript","Function","PowerShellGet","2.2.5","Public","PowerShellGet","PowerShellGet","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"","","False",,"","None",,"Get","PlasterTemplate",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-PlasterTemplate","Function","Plaster","1.1.3","Public","Plaster","Plaster","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"","","False",,"","None",,"Get","PSRepository",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-PSRepository","Function","PowerShellGet","2.2.5","Public","PowerShellGet","PowerShellGet","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://github.com/PowerShell/PowerShellEditorServices/tree/master/module/docs/Get-Token.md","
    <#
    .EXTERNALHELP ..\PowerShellEditorServices.Commands-help.xml
    #>
    [CmdletBinding()]
    [OutputType([System.Management.Automation.Language.Token])]
    [System.Diagnostics.CodeAnalysis.SuppressMessage('PSUseOutputTypeCorrectly', '', Justification='Issue #676')]
    param(
        [Parameter(Position=0, ValueFromPipeline, ValueFromPipelineByPropertyName)]
        [ValidateNotNullOrEmpty()]
        [System.Management.Automation.Language.IScriptExtent]
        $Extent
    )
    process {
        if (-not $Extent) {
            if (-not $PSCmdlet.MyInvocation.ExpectingInput) {
                # yield
                $psEditor.GetEditorContext().CurrentFile.Tokens
            }
            return
        }

        $tokens    = $psEditor.GetEditorContext().CurrentFile.Tokens
        $predicate = [Func[System.Management.Automation.Language.Token, bool]]{
            param($Token)

            ($Token.Extent.StartOffset -ge $Extent.StartOffset -and
             $Token.Extent.EndOffset   -le $Extent.EndOffset)
        }
        if ($tokens){
            $result = [Linq.Enumerable]::Where($tokens, $predicate)
        }
        # yield
        $result
    }
","True",,"
    <#
    .EXTERNALHELP ..\PowerShellEditorServices.Commands-help.xml
    #>
    [CmdletBinding()]
    [OutputType([System.Management.Automation.Language.Token])]
    [System.Diagnostics.CodeAnalysis.SuppressMessage('PSUseOutputTypeCorrectly', '', Justification='Issue #676')]
    param(
        [Parameter(Position=0, ValueFromPipeline, ValueFromPipelineByPropertyName)]
        [ValidateNotNullOrEmpty()]
        [System.Management.Automation.Language.IScriptExtent]
        $Extent
    )
    process {
        if (-not $Extent) {
            if (-not $PSCmdlet.MyInvocation.ExpectingInput) {
                # yield
                $psEditor.GetEditorContext().CurrentFile.Tokens
            }
            return
        }

        $tokens    = $psEditor.GetEditorContext().CurrentFile.Tokens
        $predicate = [Func[System.Management.Automation.Language.Token, bool]]{
            param($Token)

            ($Token.Extent.StartOffset -ge $Extent.StartOffset -and
             $Token.Extent.EndOffset   -le $Extent.EndOffset)
        }
        if ($tokens){
            $result = [Linq.Enumerable]::Where($tokens, $predicate)
        }
        # yield
        $result
    }
","None",,"Get","Token",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Token","Function","PowerShellEditorServices.Commands","0.2.0","Public","PowerShellEditorServices.Commands","PowerShellEditorServices.Commands","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=113316","
<#
.FORWARDHELPTARGETNAME Get-Help
.FORWARDHELPCATEGORY Cmdlet
#>
[CmdletBinding(DefaultParameterSetName='AllUsersView', HelpUri='https://go.microsoft.com/fwlink/?LinkID=113316')]
param(
    [Parameter(Position=0, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Name},

    [string]
    ${Path},

    [ValidateSet('Alias','Cmdlet','Provider','General','FAQ','Glossary','HelpFile','ScriptCommand','Function','Filter','ExternalScript','All','DefaultHelp','DscResource','Class','Configuration')]
    [string[]]
    ${Category},

    [Parameter(ParameterSetName='DetailedView', Mandatory=$true)]
    [switch]
    ${Detailed},

    [Parameter(ParameterSetName='AllUsersView')]
    [switch]
    ${Full},

    [Parameter(ParameterSetName='Examples', Mandatory=$true)]
    [switch]
    ${Examples},

    [Parameter(ParameterSetName='Parameters', Mandatory=$true)]
    [string[]]
    ${Parameter},

    [string[]]
    ${Component},

    [string[]]
    ${Functionality},

    [string[]]
    ${Role},

    [Parameter(ParameterSetName='Online', Mandatory=$true)]
    [switch]
    ${Online},

    [Parameter(ParameterSetName='ShowWindow', Mandatory=$true)]
    [switch]
    ${ShowWindow})

    # Display the full help topic by default but only for the AllUsersView parameter set.
    if (($psCmdlet.ParameterSetName -eq 'AllUsersView') -and !$Full) {
        $PSBoundParameters['Full'] = $true
    }

    # Nano needs to use Unicode, but Windows and Linux need the default
    $OutputEncoding = if ([System.Management.Automation.Platform]::IsNanoServer -or [System.Management.Automation.Platform]::IsIoT) {
        [System.Text.Encoding]::Unicode
    } else {
        [System.Console]::OutputEncoding
    }

    $help = Get-Help @PSBoundParameters

    # If a list of help is returned or AliasHelpInfo (because it is small), don't pipe to more
    $psTypeNames = ($help | Select-Object -First 1).PSTypeNames
    if ($psTypeNames -Contains 'HelpInfoShort' -Or $psTypeNames -Contains 'AliasHelpInfo')
    {
        $help
    }
    elseif ($help -ne $null)
    {
        # By default use more on Windows and less on Linux.
        if ($IsWindows) {
            $pagerCommand = 'more.com'
            $pagerArgs = $null
        }
        else {
            $pagerCommand = 'less'
            $pagerArgs = '-Ps""Page %db?B of %D:.\. Press h for help or q to quit\.$""'
        }

        # Respect PAGER environment variable which allows user to specify a custom pager.
        # Ignore a pure whitespace PAGER value as that would cause the tokenizer to return 0 tokens.
        if (![string]::IsNullOrWhitespace($env:PAGER)) {
            if (Get-Command $env:PAGER -ErrorAction Ignore) {
                # Entire PAGER value corresponds to a single command.
                $pagerCommand = $env:PAGER
                $pagerArgs = $null
            }
            else {
                # PAGER value is not a valid command, check if PAGER command and arguments have been specified.
                # Tokenize the specified $env:PAGER value. Ignore tokenizing errors since any errors may be valid
                # argument syntax for the paging utility.
                $errs = $null
                $tokens = [System.Management.Automation.PSParser]::Tokenize($env:PAGER, [ref]$errs)

                $customPagerCommand = $tokens[0].Content
                if (!(Get-Command $customPagerCommand -ErrorAction Ignore)) {
                    # Custom pager command is invalid, issue a warning.
                    Write-Warning ""Custom-paging utility command not found. Ignoring command specified in `$env:PAGER: $env:PAGER""
                }
                else {
                    # This approach will preserve all the pagers args.
                    $pagerCommand = $customPagerCommand
                    $pagerArgs = if ($tokens.Count -gt 1) {$env:PAGER.Substring($tokens[1].Start)} else {$null}
                }
            }
        }

        $pagerCommandInfo = Get-Command -Name $pagerCommand -ErrorAction Ignore
        if ($pagerCommandInfo -eq $null) {
            $help
        }
        elseif ($pagerCommandInfo.CommandType -eq 'Application') {
            # If the pager is an application, format the output width before sending to the app.
            $consoleWidth = [System.Math]::Max([System.Console]::WindowWidth, 20)

            if ($pagerArgs) {
                # Supply pager arguments to an application without any PowerShell parsing of the arguments.
                # Leave environment variable to help user debug arguments supplied in $env:PAGER.
                $env:__PSPAGER_ARGS = $pagerArgs
                $help | Out-String -Stream -Width ($consoleWidth - 1) | & $pagerCommand --% %__PSPAGER_ARGS%
            }
            else {
                $help | Out-String -Stream -Width ($consoleWidth - 1) | & $pagerCommand
            }
        }
        else {
            # The pager command is a PowerShell function, script or alias, so pipe directly into it.
            $help | & $pagerCommand $pagerArgs
        }
    }
","True","AllUsersView","
<#
.FORWARDHELPTARGETNAME Get-Help
.FORWARDHELPCATEGORY Cmdlet
#>
[CmdletBinding(DefaultParameterSetName='AllUsersView', HelpUri='https://go.microsoft.com/fwlink/?LinkID=113316')]
param(
    [Parameter(Position=0, ValueFromPipelineByPropertyName=$true)]
    [string]
    ${Name},

    [string]
    ${Path},

    [ValidateSet('Alias','Cmdlet','Provider','General','FAQ','Glossary','HelpFile','ScriptCommand','Function','Filter','ExternalScript','All','DefaultHelp','DscResource','Class','Configuration')]
    [string[]]
    ${Category},

    [Parameter(ParameterSetName='DetailedView', Mandatory=$true)]
    [switch]
    ${Detailed},

    [Parameter(ParameterSetName='AllUsersView')]
    [switch]
    ${Full},

    [Parameter(ParameterSetName='Examples', Mandatory=$true)]
    [switch]
    ${Examples},

    [Parameter(ParameterSetName='Parameters', Mandatory=$true)]
    [string[]]
    ${Parameter},

    [string[]]
    ${Component},

    [string[]]
    ${Functionality},

    [string[]]
    ${Role},

    [Parameter(ParameterSetName='Online', Mandatory=$true)]
    [switch]
    ${Online},

    [Parameter(ParameterSetName='ShowWindow', Mandatory=$true)]
    [switch]
    ${ShowWindow})

    # Display the full help topic by default but only for the AllUsersView parameter set.
    if (($psCmdlet.ParameterSetName -eq 'AllUsersView') -and !$Full) {
        $PSBoundParameters['Full'] = $true
    }

    # Nano needs to use Unicode, but Windows and Linux need the default
    $OutputEncoding = if ([System.Management.Automation.Platform]::IsNanoServer -or [System.Management.Automation.Platform]::IsIoT) {
        [System.Text.Encoding]::Unicode
    } else {
        [System.Console]::OutputEncoding
    }

    $help = Get-Help @PSBoundParameters

    # If a list of help is returned or AliasHelpInfo (because it is small), don't pipe to more
    $psTypeNames = ($help | Select-Object -First 1).PSTypeNames
    if ($psTypeNames -Contains 'HelpInfoShort' -Or $psTypeNames -Contains 'AliasHelpInfo')
    {
        $help
    }
    elseif ($help -ne $null)
    {
        # By default use more on Windows and less on Linux.
        if ($IsWindows) {
            $pagerCommand = 'more.com'
            $pagerArgs = $null
        }
        else {
            $pagerCommand = 'less'
            $pagerArgs = '-Ps""Page %db?B of %D:.\. Press h for help or q to quit\.$""'
        }

        # Respect PAGER environment variable which allows user to specify a custom pager.
        # Ignore a pure whitespace PAGER value as that would cause the tokenizer to return 0 tokens.
        if (![string]::IsNullOrWhitespace($env:PAGER)) {
            if (Get-Command $env:PAGER -ErrorAction Ignore) {
                # Entire PAGER value corresponds to a single command.
                $pagerCommand = $env:PAGER
                $pagerArgs = $null
            }
            else {
                # PAGER value is not a valid command, check if PAGER command and arguments have been specified.
                # Tokenize the specified $env:PAGER value. Ignore tokenizing errors since any errors may be valid
                # argument syntax for the paging utility.
                $errs = $null
                $tokens = [System.Management.Automation.PSParser]::Tokenize($env:PAGER, [ref]$errs)

                $customPagerCommand = $tokens[0].Content
                if (!(Get-Command $customPagerCommand -ErrorAction Ignore)) {
                    # Custom pager command is invalid, issue a warning.
                    Write-Warning ""Custom-paging utility command not found. Ignoring command specified in `$env:PAGER: $env:PAGER""
                }
                else {
                    # This approach will preserve all the pagers args.
                    $pagerCommand = $customPagerCommand
                    $pagerArgs = if ($tokens.Count -gt 1) {$env:PAGER.Substring($tokens[1].Start)} else {$null}
                }
            }
        }

        $pagerCommandInfo = Get-Command -Name $pagerCommand -ErrorAction Ignore
        if ($pagerCommandInfo -eq $null) {
            $help
        }
        elseif ($pagerCommandInfo.CommandType -eq 'Application') {
            # If the pager is an application, format the output width before sending to the app.
            $consoleWidth = [System.Math]::Max([System.Console]::WindowWidth, 20)

            if ($pagerArgs) {
                # Supply pager arguments to an application without any PowerShell parsing of the arguments.
                # Leave environment variable to help user debug arguments supplied in $env:PAGER.
                $env:__PSPAGER_ARGS = $pagerArgs
                $help | Out-String -Stream -Width ($consoleWidth - 1) | & $pagerCommand --% %__PSPAGER_ARGS%
            }
            else {
                $help | Out-String -Stream -Width ($consoleWidth - 1) | & $pagerCommand
            }
        }
        else {
            # The pager command is a PowerShell function, script or alias, so pipe directly into it.
            $help | & $pagerCommand $pagerArgs
        }
    }
","None",,"","",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","help","Function","",,"Public","",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://github.com/PowerShell/PowerShellEditorServices/tree/master/module/docs/Import-EditorCommand.md","
    <#
    .EXTERNALHELP ..\PowerShellEditorServices.Commands-help.xml
    #>
    [OutputType([Microsoft.PowerShell.EditorServices.Extensions.EditorCommand, Microsoft.PowerShell.EditorServices])]
    [CmdletBinding(DefaultParameterSetName='ByCommand')]
    param(
        [Parameter(Position=0,
                   Mandatory,
                   ValueFromPipeline,
                   ValueFromPipelineByPropertyName,
                   ParameterSetName='ByCommand')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        $Command,

        [Parameter(Position=0, Mandatory, ParameterSetName='ByModule')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        $Module,

        [switch]
        $Force,

        [switch]
        $PassThru
    )
    begin {
        function GetCommandsFromModule {
            param(
                [Parameter(ValueFromPipeline)]
                [string]
                $ModuleToSearch
            )
            process {
                if (-not $ModuleToSearch) { return }

                $caller = (Get-PSCallStack)[2]

                if ($caller.InvocationInfo.MyCommand.ScriptBlock.Module.Name -eq $ModuleToSearch) {
                    $moduleInfo = $caller.InvocationInfo.MyCommand.ScriptBlock.Module

                    return $moduleInfo.Invoke(
                        {
                            $ExecutionContext.SessionState.InvokeProvider.Item.Get('function:\*') |
                                Where-Object ModuleName -eq $args[0]
                        },
                        $ModuleToSearch)
                }

                $moduleInfo = Get-Module $ModuleToSearch -ErrorAction SilentlyContinue
                return $moduleInfo.ExportedFunctions.Values
            }
        }
        $editorCommands = @{}

        foreach ($existingCommand in $psEditor.GetCommands()) {
            $editorCommands[$existingCommand.Name] = $existingCommand
        }
    }
    process {
        switch ($PSCmdlet.ParameterSetName) {
            ByModule {
                $commands = $Module | GetCommandsFromModule
            }
            ByCommand {
                $commands = $Command | Get-Command -ErrorAction SilentlyContinue
            }
        }
        $attributeType = [Microsoft.PowerShell.EditorServices.Extensions.EditorCommandAttribute, Microsoft.PowerShell.EditorServices]
        foreach ($aCommand in $commands) {
            # Get the attribute from our command to get name info.
            $details = $aCommand.ScriptBlock.Attributes | Where-Object TypeId -eq $attributeType

            if ($details) {
                # TODO: Add module name to this?
                # Name: Expand-Expression becomes ExpandExpression
                if (-not $details.Name) { $details.Name = $aCommand.Name -replace '-' }

                # DisplayName: Expand-Expression becomes Expand Expression
                if (-not $details.DisplayName) { $details.DisplayName = $aCommand.Name -replace '-', ' ' }

                # If the editor command is already loaded skip unless force is specified.
                if ($editorCommands.ContainsKey($details.Name)) {
                    if ($Force.IsPresent) {
                        $null = $psEditor.UnregisterCommand($details.Name)
                    } else {
                        $PSCmdlet.WriteVerbose($Strings.EditorCommandExists -f $details.Name)
                        continue
                    }
                }
                # Check for a context parameter.
                $contextParameter = $aCommand.Parameters.Values |
                    Where-Object ParameterType -eq ([Microsoft.PowerShell.EditorServices.Extensions.EditorContext, Microsoft.PowerShell.EditorServices])

                # If one is found then add a named argument. Otherwise call the command directly.
                if ($contextParameter) {
                    $sbText = '{0} -{1} $args[0]' -f $aCommand.Name, $contextParameter.Name
                    $scriptBlock = [scriptblock]::Create($sbText)
                } else {
                    $scriptBlock = [scriptblock]::Create($aCommand.Name)
                }

                $editorCommand = [Microsoft.PowerShell.EditorServices.Extensions.EditorCommand, Microsoft.PowerShell.EditorServices]::new(
                    <# commandName:    #> $details.Name,
                    <# displayName:    #> $details.DisplayName,
                    <# suppressOutput: #> $details.SuppressOutput,
                    <# scriptBlock:    #> $scriptBlock)

                $PSCmdlet.WriteVerbose($Strings.EditorCommandImporting -f $details.Name)
                $null = $psEditor.RegisterCommand($editorCommand)

                if ($PassThru.IsPresent -and $editorCommand) {
                    $editorCommand # yield
                }
            }
        }
    }
","True","ByCommand","
    <#
    .EXTERNALHELP ..\PowerShellEditorServices.Commands-help.xml
    #>
    [OutputType([Microsoft.PowerShell.EditorServices.Extensions.EditorCommand, Microsoft.PowerShell.EditorServices])]
    [CmdletBinding(DefaultParameterSetName='ByCommand')]
    param(
        [Parameter(Position=0,
                   Mandatory,
                   ValueFromPipeline,
                   ValueFromPipelineByPropertyName,
                   ParameterSetName='ByCommand')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        $Command,

        [Parameter(Position=0, Mandatory, ParameterSetName='ByModule')]
        [ValidateNotNullOrEmpty()]
        [string[]]
        $Module,

        [switch]
        $Force,

        [switch]
        $PassThru
    )
    begin {
        function GetCommandsFromModule {
            param(
                [Parameter(ValueFromPipeline)]
                [string]
                $ModuleToSearch
            )
            process {
                if (-not $ModuleToSearch) { return }

                $caller = (Get-PSCallStack)[2]

                if ($caller.InvocationInfo.MyCommand.ScriptBlock.Module.Name -eq $ModuleToSearch) {
                    $moduleInfo = $caller.InvocationInfo.MyCommand.ScriptBlock.Module

                    return $moduleInfo.Invoke(
                        {
                            $ExecutionContext.SessionState.InvokeProvider.Item.Get('function:\*') |
                                Where-Object ModuleName -eq $args[0]
                        },
                        $ModuleToSearch)
                }

                $moduleInfo = Get-Module $ModuleToSearch -ErrorAction SilentlyContinue
                return $moduleInfo.ExportedFunctions.Values
            }
        }
        $editorCommands = @{}

        foreach ($existingCommand in $psEditor.GetCommands()) {
            $editorCommands[$existingCommand.Name] = $existingCommand
        }
    }
    process {
        switch ($PSCmdlet.ParameterSetName) {
            ByModule {
                $commands = $Module | GetCommandsFromModule
            }
            ByCommand {
                $commands = $Command | Get-Command -ErrorAction SilentlyContinue
            }
        }
        $attributeType = [Microsoft.PowerShell.EditorServices.Extensions.EditorCommandAttribute, Microsoft.PowerShell.EditorServices]
        foreach ($aCommand in $commands) {
            # Get the attribute from our command to get name info.
            $details = $aCommand.ScriptBlock.Attributes | Where-Object TypeId -eq $attributeType

            if ($details) {
                # TODO: Add module name to this?
                # Name: Expand-Expression becomes ExpandExpression
                if (-not $details.Name) { $details.Name = $aCommand.Name -replace '-' }

                # DisplayName: Expand-Expression becomes Expand Expression
                if (-not $details.DisplayName) { $details.DisplayName = $aCommand.Name -replace '-', ' ' }

                # If the editor command is already loaded skip unless force is specified.
                if ($editorCommands.ContainsKey($details.Name)) {
                    if ($Force.IsPresent) {
                        $null = $psEditor.UnregisterCommand($details.Name)
                    } else {
                        $PSCmdlet.WriteVerbose($Strings.EditorCommandExists -f $details.Name)
                        continue
                    }
                }
                # Check for a context parameter.
                $contextParameter = $aCommand.Parameters.Values |
                    Where-Object ParameterType -eq ([Microsoft.PowerShell.EditorServices.Extensions.EditorContext, Microsoft.PowerShell.EditorServices])

                # If one is found then add a named argument. Otherwise call the command directly.
                if ($contextParameter) {
                    $sbText = '{0} -{1} $args[0]' -f $aCommand.Name, $contextParameter.Name
                    $scriptBlock = [scriptblock]::Create($sbText)
                } else {
                    $scriptBlock = [scriptblock]::Create($aCommand.Name)
                }

                $editorCommand = [Microsoft.PowerShell.EditorServices.Extensions.EditorCommand, Microsoft.PowerShell.EditorServices]::new(
                    <# commandName:    #> $details.Name,
                    <# displayName:    #> $details.DisplayName,
                    <# suppressOutput: #> $details.SuppressOutput,
                    <# scriptBlock:    #> $scriptBlock)

                $PSCmdlet.WriteVerbose($Strings.EditorCommandImporting -f $details.Name)
                $null = $psEditor.RegisterCommand($editorCommand)

                if ($PassThru.IsPresent -and $editorCommand) {
                    $editorCommand # yield
                }
            }
        }
    }
","None",,"Import","EditorCommand",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Import-EditorCommand","Function","PowerShellEditorServices.Commands","0.2.0","Public","PowerShellEditorServices.Commands","PowerShellEditorServices.Commands","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"","","False",,"","None",,"Install","Module",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Install-Module","Function","PowerShellGet","2.2.5","Public","PowerShellGet","PowerShellGet","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"","","False",,"","None",,"Install","Script",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Install-Script","Function","PowerShellGet","2.2.5","Public","PowerShellGet","PowerShellGet","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"","","False",,"","None",,"Invoke","DscResource",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Invoke-DscResource","Function","PSDesiredStateConfiguration","2.0.5","Public","PSDesiredStateConfiguration","PSDesiredStateConfiguration","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"","","False",,"","None",,"Invoke","Plaster",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Invoke-Plaster","Function","Plaster","1.1.3","Public","Plaster","Plaster","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://github.com/PowerShell/PowerShellEditorServices/tree/master/module/docs/Join-ScriptExtent.md","
    <#
    .EXTERNALHELP ..\PowerShellEditorServices.Commands-help.xml
    #>
    [CmdletBinding()]
    [OutputType([System.Management.Automation.Language.IScriptExtent])]
    param(
        [Parameter(ValueFromPipeline, ValueFromPipelineByPropertyName)]
        [System.Management.Automation.Language.IScriptExtent[]]
        $Extent
    )
    begin {
        $extentList = New-Object System.Collections.Generic.List[System.Management.Automation.Language.IScriptExtent]
    }
    process {
        if ($Extent) {
            $extentList.AddRange($Extent)
        }
    }
    end {
        if (-not $extentList) { return }

        $startOffset = [Linq.Enumerable]::Min($extentList.StartOffset -as [int[]])
        $endOffset   = [Linq.Enumerable]::Max($extentList.EndOffset -as [int[]])

        return New-Object Microsoft.PowerShell.EditorServices.FullScriptExtent @(
            $psEditor.GetEditorContext().CurrentFile,
            $startOffset,
            $endOffset)
    }
","True",,"
    <#
    .EXTERNALHELP ..\PowerShellEditorServices.Commands-help.xml
    #>
    [CmdletBinding()]
    [OutputType([System.Management.Automation.Language.IScriptExtent])]
    param(
        [Parameter(ValueFromPipeline, ValueFromPipelineByPropertyName)]
        [System.Management.Automation.Language.IScriptExtent[]]
        $Extent
    )
    begin {
        $extentList = New-Object System.Collections.Generic.List[System.Management.Automation.Language.IScriptExtent]
    }
    process {
        if ($Extent) {
            $extentList.AddRange($Extent)
        }
    }
    end {
        if (-not $extentList) { return }

        $startOffset = [Linq.Enumerable]::Min($extentList.StartOffset -as [int[]])
        $endOffset   = [Linq.Enumerable]::Max($extentList.EndOffset -as [int[]])

        return New-Object Microsoft.PowerShell.EditorServices.FullScriptExtent @(
            $psEditor.GetEditorContext().CurrentFile,
            $startOffset,
            $endOffset)
    }
","None",,"Join","ScriptExtent",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Join-ScriptExtent","Function","PowerShellEditorServices.Commands","0.2.0","Public","PowerShellEditorServices.Commands","PowerShellEditorServices.Commands","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"","","False",,"","None",,"New","DscChecksum",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-DscChecksum","Function","PSDesiredStateConfiguration","2.0.5","Public","PSDesiredStateConfiguration","PSDesiredStateConfiguration","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"","
    [CmdletBinding()]
    param(
        [Parameter()]
        [String[]]
        [ValidateNotNullOrEmpty()]
        $Path,

        [Parameter(ValueFromPipeline=$true)]
        $Value,

        [Parameter()]
        [switch]
        $Force
    )

    begin {
        $valueList = @()
    }

    process {
        $valueList += $Value
    }

    end {
        # If editorContext is null, then we're in a Temp session and
        # this cmdlet won't work so return early.
        try {
            $editorContext = $psEditor.GetEditorContext()
        }
        catch {
            # If there's no editor, this throws an error. Create a new file, and grab the context here.
            # This feels really hacky way to do it, but not sure if there's another way to detect editor context...
            $psEditor.Workspace.NewFile()
            $editorContext = $psEditor.GetEditorContext()
        }

        if (!$editorContext) {
            return
        }

        if ($Path) {
            foreach ($fileName in $Path)
            {
                if (-not (Test-Path $fileName) -or $Force) {
                    New-Item -Path $fileName -ItemType File | Out-Null

                    if ($Path.Count -gt 1) {
                        $preview = $false
                    } else {
                        $preview = $true
                    }

                    # Resolve full path before passing to editor
                    if (!([System.IO.Path]::IsPathRooted($fileName))) {
                        $fileName = $ExecutionContext.SessionState.Path.GetUnresolvedProviderPathFromPSPath($fileName)
                    }

                    $psEditor.Workspace.OpenFile($fileName, $preview)
                    $editorContext.CurrentFile.InsertText(($valueList | Out-String))
                } else {
                    $PSCmdlet.WriteError( (
                        New-Object -TypeName System.Management.Automation.ErrorRecord -ArgumentList @(
                            [System.IO.IOException]""The file '$fileName' already exists."",
                            'NewEditorFileIOError',
                            [System.Management.Automation.ErrorCategory]::WriteError,
                            $fileName) ) )
                }
            }
        } else {
            $psEditor.Workspace.NewFile()
            $editorContext.CurrentFile.InsertText(($valueList | Out-String))
        }
    }
","True",,"
    [CmdletBinding()]
    param(
        [Parameter()]
        [String[]]
        [ValidateNotNullOrEmpty()]
        $Path,

        [Parameter(ValueFromPipeline=$true)]
        $Value,

        [Parameter()]
        [switch]
        $Force
    )

    begin {
        $valueList = @()
    }

    process {
        $valueList += $Value
    }

    end {
        # If editorContext is null, then we're in a Temp session and
        # this cmdlet won't work so return early.
        try {
            $editorContext = $psEditor.GetEditorContext()
        }
        catch {
            # If there's no editor, this throws an error. Create a new file, and grab the context here.
            # This feels really hacky way to do it, but not sure if there's another way to detect editor context...
            $psEditor.Workspace.NewFile()
            $editorContext = $psEditor.GetEditorContext()
        }

        if (!$editorContext) {
            return
        }

        if ($Path) {
            foreach ($fileName in $Path)
            {
                if (-not (Test-Path $fileName) -or $Force) {
                    New-Item -Path $fileName -ItemType File | Out-Null

                    if ($Path.Count -gt 1) {
                        $preview = $false
                    } else {
                        $preview = $true
                    }

                    # Resolve full path before passing to editor
                    if (!([System.IO.Path]::IsPathRooted($fileName))) {
                        $fileName = $ExecutionContext.SessionState.Path.GetUnresolvedProviderPathFromPSPath($fileName)
                    }

                    $psEditor.Workspace.OpenFile($fileName, $preview)
                    $editorContext.CurrentFile.InsertText(($valueList | Out-String))
                } else {
                    $PSCmdlet.WriteError( (
                        New-Object -TypeName System.Management.Automation.ErrorRecord -ArgumentList @(
                            [System.IO.IOException]""The file '$fileName' already exists."",
                            'NewEditorFileIOError',
                            [System.Management.Automation.ErrorCategory]::WriteError,
                            $fileName) ) )
                }
            }
        } else {
            $psEditor.Workspace.NewFile()
            $editorContext.CurrentFile.InsertText(($valueList | Out-String))
        }
    }
","None",,"New","EditorFile",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-EditorFile","Function","PowerShellEditorServices.Commands","0.2.0","Public","PowerShellEditorServices.Commands","PowerShellEditorServices.Commands","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"","","False",,"","None",,"New","PlasterManifest",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-PlasterManifest","Function","Plaster","1.1.3","Public","Plaster","Plaster","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"","","False",,"","None",,"New","ScriptFileInfo",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-ScriptFileInfo","Function","PowerShellGet","2.2.5","Public","PowerShellGet","PowerShellGet","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"","
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        $Path
    )

    begin {
        $Paths = @()
    }

    process {
        $Paths += $Path
    }

    end {
        if ($Paths.Count -gt 1) {
            $preview = $false
        } else {
            $preview = $true
        }

        Get-ChildItem $Paths -File | ForEach-Object {
            $psEditor.Workspace.OpenFile($_.FullName, $preview)
        }
    }
","True",,"
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        $Path
    )

    begin {
        $Paths = @()
    }

    process {
        $Paths += $Path
    }

    end {
        if ($Paths.Count -gt 1) {
            $preview = $false
        } else {
            $preview = $true
        }

        Get-ChildItem $Paths -File | ForEach-Object {
            $psEditor.Workspace.OpenFile($_.FullName, $preview)
        }
    }
","None",,"Open","EditorFile",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Open-EditorFile","Function","PowerShellEditorServices.Commands","0.2.0","Public","PowerShellEditorServices.Commands","PowerShellEditorServices.Commands","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://docs.microsoft.com/powershell/module/microsoft.powershell.utility/out-string?view=powershell-7.1&WT.mc_id=ps-gethelp","
[CmdletBinding()]
param(
    [ValidateRange(2, 2147483647)]
    [int]
    ${Width},

    [Parameter(ValueFromPipeline=$true)]
    [psobject]
    ${InputObject})

begin {
    $PSBoundParameters['Stream'] = $true
    $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand('Out-String',[System.Management.Automation.CommandTypes]::Cmdlet)
    $scriptCmd = {& $wrappedCmd @PSBoundParameters }

    $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
    $steppablePipeline.Begin($PSCmdlet)
}

process {
    $steppablePipeline.Process($_)
}

end {
    $steppablePipeline.End()
}
<#
.ForwardHelpTargetName Out-String
.ForwardHelpCategory Cmdlet
#>
","True",,"
[CmdletBinding()]
param(
    [ValidateRange(2, 2147483647)]
    [int]
    ${Width},

    [Parameter(ValueFromPipeline=$true)]
    [psobject]
    ${InputObject})

begin {
    $PSBoundParameters['Stream'] = $true
    $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand('Out-String',[System.Management.Automation.CommandTypes]::Cmdlet)
    $scriptCmd = {& $wrappedCmd @PSBoundParameters }

    $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
    $steppablePipeline.Begin($PSCmdlet)
}

process {
    $steppablePipeline.Process($_)
}

end {
    $steppablePipeline.End()
}
<#
.ForwardHelpTargetName Out-String
.ForwardHelpCategory Cmdlet
#>
","None",,"","",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","oss","Function","",,"Public","",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://github.com/PowerShell/PowerShellEditorServices/tree/master/module/docs/Out-CurrentFile.md","
    <#
    .EXTERNALHELP ..\PowerShellEditorServices.Commands-help.xml
    #>
    [CmdletBinding()]
    param(
        [Switch]$AsNewFile,

        [Parameter(ValueFromPipeline, Mandatory = $true)]
        $InputObject
    )

    Begin { $objectsToWrite = @() }
    Process { $objectsToWrite += $InputObject }
    End {

        # If requested, create a new file
        if ($AsNewFile) {
            $psEditor.Workspace.NewFile()
        }

        $outputString = ""@`""`r`n{0}`r`n`""@"" -f ($objectsToWrite|out-string).Trim()

        try {
            # If there is no file open
            $psEditor.GetEditorContext()
        }
        catch {
            # create a new one
            $psEditor.Workspace.NewFile()
        }

        $psEditor.GetEditorContext().CurrentFile.InsertText($outputString)
    }
","True",,"
    <#
    .EXTERNALHELP ..\PowerShellEditorServices.Commands-help.xml
    #>
    [CmdletBinding()]
    param(
        [Switch]$AsNewFile,

        [Parameter(ValueFromPipeline, Mandatory = $true)]
        $InputObject
    )

    Begin { $objectsToWrite = @() }
    Process { $objectsToWrite += $InputObject }
    End {

        # If requested, create a new file
        if ($AsNewFile) {
            $psEditor.Workspace.NewFile()
        }

        $outputString = ""@`""`r`n{0}`r`n`""@"" -f ($objectsToWrite|out-string).Trim()

        try {
            # If there is no file open
            $psEditor.GetEditorContext()
        }
        catch {
            # create a new one
            $psEditor.Workspace.NewFile()
        }

        $psEditor.GetEditorContext().CurrentFile.InsertText($outputString)
    }
","None",,"Out","CurrentFile",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Out-CurrentFile","Function","PowerShellEditorServices.Commands","0.2.0","Public","PowerShellEditorServices.Commands","PowerShellEditorServices.Commands","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"","$null = Read-Host 'Press Enter to continue...'","False",,"$null = Read-Host 'Press Enter to continue...'","None",,"","",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Pause","Function","",,"Public","",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=225750","
""PS $($executionContext.SessionState.Path.CurrentLocation)$('>' * ($nestedPromptLevel + 1)) "";
# .Link
# https://go.microsoft.com/fwlink/?LinkID=225750
# .ExternalHelp System.Management.Automation.dll-help.xml
","False",,"
""PS $($executionContext.SessionState.Path.CurrentLocation)$('>' * ($nestedPromptLevel + 1)) "";
# .Link
# https://go.microsoft.com/fwlink/?LinkID=225750
# .ExternalHelp System.Management.Automation.dll-help.xml
","None",,"","",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","prompt","Function","",,"Public","",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"","
    Microsoft.PowerShell.Core\Set-StrictMode -Off
    [Microsoft.PowerShell.PSConsoleReadLine]::ReadLine($host.Runspace, $ExecutionContext)
","False",,"
    Microsoft.PowerShell.Core\Set-StrictMode -Off
    [Microsoft.PowerShell.PSConsoleReadLine]::ReadLine($host.Runspace, $ExecutionContext)
","None",,"","",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","PSConsoleHostReadLine","Function","PSReadLine","2.1.0","Public","PSReadLine","PSReadLine","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"","","False",,"","None",,"Publish","Module",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Publish-Module","Function","PowerShellGet","2.2.5","Public","PowerShellGet","PowerShellGet","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"","","False",,"","None",,"Publish","Script",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Publish-Script","Function","PowerShellGet","2.2.5","Public","PowerShellGet","PowerShellGet","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://github.com/PowerShell/PowerShellEditorServices/tree/master/module/docs/Register-EditorCommand.md","
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]$Name,

        [Parameter(Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]$DisplayName,

        [Parameter(
            Mandatory=$true,
            ParameterSetName=""Function"")]
        [ValidateNotNullOrEmpty()]
        [string]$Function,

        [Parameter(
            Mandatory=$true,
            ParameterSetName=""ScriptBlock"")]
        [ValidateNotNullOrEmpty()]
        [ScriptBlock]$ScriptBlock,

        [switch]$SuppressOutput
    )

    Process
    {
        $commandArgs = @($Name, $DisplayName, $SuppressOutput.IsPresent)

        $editorCommand = if ($ScriptBlock -ne $null)
        {
            Write-Verbose ""Registering command '$Name' which executes a ScriptBlock""
            [Microsoft.PowerShell.EditorServices.Extensions.EditorCommand, Microsoft.PowerShell.EditorServices]::new($Name, $DisplayName, $SuppressOutput, $ScriptBlock)
        }
        else
        {
            Write-Verbose ""Registering command '$Name' which executes a function""
            [Microsoft.PowerShell.EditorServices.Extensions.EditorCommand, Microsoft.PowerShell.EditorServices]::new($Name, $DisplayName, $SuppressOutput, $Function)
        }

        if ($psEditor.RegisterCommand($editorCommand))
        {
            Write-Verbose ""Registered new command '$Name'""
        }
        else
        {
            Write-Verbose ""Updated existing command '$Name'""
        }
    }
","True",,"
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]$Name,

        [Parameter(Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]$DisplayName,

        [Parameter(
            Mandatory=$true,
            ParameterSetName=""Function"")]
        [ValidateNotNullOrEmpty()]
        [string]$Function,

        [Parameter(
            Mandatory=$true,
            ParameterSetName=""ScriptBlock"")]
        [ValidateNotNullOrEmpty()]
        [ScriptBlock]$ScriptBlock,

        [switch]$SuppressOutput
    )

    Process
    {
        $commandArgs = @($Name, $DisplayName, $SuppressOutput.IsPresent)

        $editorCommand = if ($ScriptBlock -ne $null)
        {
            Write-Verbose ""Registering command '$Name' which executes a ScriptBlock""
            [Microsoft.PowerShell.EditorServices.Extensions.EditorCommand, Microsoft.PowerShell.EditorServices]::new($Name, $DisplayName, $SuppressOutput, $ScriptBlock)
        }
        else
        {
            Write-Verbose ""Registering command '$Name' which executes a function""
            [Microsoft.PowerShell.EditorServices.Extensions.EditorCommand, Microsoft.PowerShell.EditorServices]::new($Name, $DisplayName, $SuppressOutput, $Function)
        }

        if ($psEditor.RegisterCommand($editorCommand))
        {
            Write-Verbose ""Registered new command '$Name'""
        }
        else
        {
            Write-Verbose ""Updated existing command '$Name'""
        }
    }
","None",,"Register","EditorCommand",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Register-EditorCommand","Function","PowerShellEditorServices.Commands","0.2.0","Public","PowerShellEditorServices.Commands","PowerShellEditorServices.Commands","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"","","False",,"","None",,"Register","PSRepository",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Register-PSRepository","Function","PowerShellGet","2.2.5","Public","PowerShellGet","PowerShellGet","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"","","False",,"","None",,"Save","Module",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Save-Module","Function","PowerShellGet","2.2.5","Public","PowerShellGet","PowerShellGet","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"","","False",,"","None",,"Save","Script",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Save-Script","Function","PowerShellGet","2.2.5","Public","PowerShellGet","PowerShellGet","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"","","False",,"","None",,"Set","PSRepository",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-PSRepository","Function","PowerShellGet","2.2.5","Public","PowerShellGet","PowerShellGet","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://github.com/PowerShell/PowerShellEditorServices/tree/master/module/docs/Set-ScriptExtent.md","
    <#
    .EXTERNALHELP ..\PowerShellEditorServices.Commands-help.xml
    #>
    [CmdletBinding(PositionalBinding=$false, DefaultParameterSetName='__AllParameterSets')]
    param(
        [Parameter(Position=0, Mandatory)]
        [psobject]
        $Text,

        [Parameter(Mandatory, ParameterSetName='AsString')]
        [switch]
        $AsString,

        [Parameter(Mandatory, ParameterSetName='AsArray')]
        [switch]
        $AsArray,

        [Parameter(ValueFromPipeline, ValueFromPipelineByPropertyName)]
        [System.Management.Automation.Language.IScriptExtent]
        $Extent = (Find-Ast -AtCursor).Extent
    )
    begin {
        $fileContext = $psEditor.GetEditorContext().CurrentFile
        $extentList = [System.Collections.Generic.List[Microsoft.PowerShell.EditorServices.Extensions.FileScriptExtent, Microsoft.PowerShell.EditorServices]]::new()
    }
    process {
        if ($Extent -isnot [Microsoft.PowerShell.EditorServices.Extensions.FileScriptExtent, Microsoft.PowerShell.EditorServices]) {
            $Extent = [Microsoft.PowerShell.EditorServices.Extensions.FileScriptExtent, Microsoft.PowerShell.EditorServices]::FromOffsets(
                $fileContext,
                $Extent.StartOffset,
                $Extent.EndOffset)
        }
        $extentList.Add($Extent)
    }
    # Currently this kills the pipeline because we need to keep track and edit all extents for position tracking.
    # TODO: Consider queueing changes in a static property and adding a PassThru switch.
    end {
        switch ($PSCmdlet.ParameterSetName) {
            # Insert text as a single string expression.
            AsString {
                $Text = ""'{0}'"" -f $Text.Replace(""'"", ""''"")
            }
            # Create a string expression for each line, separated by a comma.
            AsArray {
                $newLine = [Environment]::NewLine
                $Text = ""'"" + ($Text.Replace(""'"", ""''"") -split '\r?\n' -join ""',$newLine'"") + ""'""

                if ($Text.Split(""`n"", [StringSplitOptions]::RemoveEmptyEntries).Count -gt 1) {
                    $needsIndentFix = $true
                }
            }
        }

        foreach ($aExtent in $extentList) {
            $aText = $Text

            if ($needsIndentFix) {
                # I'd rather let PSSA handle this when there are more formatting options.
                $indentOffset = ' ' * ($aExtent.StartColumnNumber - 1)
                $aText = $aText -split '\r?\n' `
                                -join ([Environment]::NewLine + $indentOffset)
            }
            $differenceOffset = $aText.Length - $aExtent.Text.Length
            $scriptText       = $fileContext.GetText()

            $fileContext.InsertText($aText, $aExtent)

            $newText = $scriptText.Remove($aExtent.StartOffset, $aExtent.Text.Length).Insert($aExtent.StartOffset, $aText)

            $timeoutLoop = 0
            while ($fileContext.GetText() -ne $newText) {
                Start-Sleep -Milliseconds 30
                $timeoutLoop++

                if ($timeoutLoop -gt 20) {
                    $PSCmdlet.WriteDebug(('Timed out waiting for change at range {0}, {1}' -f $aExtent.StartOffset,
                                                                                              $aExtent.EndOffset))
                    break
                }
            }

            if ($differenceOffset) {
                $extentList.ForEach({
                    if ($args[0].StartOffset -ge $aExtent.EndOffset) {
                        $args[0].AddOffset($differenceOffset)
                    }
                })
            }
        }
    }
","True","__AllParameterSets","
    <#
    .EXTERNALHELP ..\PowerShellEditorServices.Commands-help.xml
    #>
    [CmdletBinding(PositionalBinding=$false, DefaultParameterSetName='__AllParameterSets')]
    param(
        [Parameter(Position=0, Mandatory)]
        [psobject]
        $Text,

        [Parameter(Mandatory, ParameterSetName='AsString')]
        [switch]
        $AsString,

        [Parameter(Mandatory, ParameterSetName='AsArray')]
        [switch]
        $AsArray,

        [Parameter(ValueFromPipeline, ValueFromPipelineByPropertyName)]
        [System.Management.Automation.Language.IScriptExtent]
        $Extent = (Find-Ast -AtCursor).Extent
    )
    begin {
        $fileContext = $psEditor.GetEditorContext().CurrentFile
        $extentList = [System.Collections.Generic.List[Microsoft.PowerShell.EditorServices.Extensions.FileScriptExtent, Microsoft.PowerShell.EditorServices]]::new()
    }
    process {
        if ($Extent -isnot [Microsoft.PowerShell.EditorServices.Extensions.FileScriptExtent, Microsoft.PowerShell.EditorServices]) {
            $Extent = [Microsoft.PowerShell.EditorServices.Extensions.FileScriptExtent, Microsoft.PowerShell.EditorServices]::FromOffsets(
                $fileContext,
                $Extent.StartOffset,
                $Extent.EndOffset)
        }
        $extentList.Add($Extent)
    }
    # Currently this kills the pipeline because we need to keep track and edit all extents for position tracking.
    # TODO: Consider queueing changes in a static property and adding a PassThru switch.
    end {
        switch ($PSCmdlet.ParameterSetName) {
            # Insert text as a single string expression.
            AsString {
                $Text = ""'{0}'"" -f $Text.Replace(""'"", ""''"")
            }
            # Create a string expression for each line, separated by a comma.
            AsArray {
                $newLine = [Environment]::NewLine
                $Text = ""'"" + ($Text.Replace(""'"", ""''"") -split '\r?\n' -join ""',$newLine'"") + ""'""

                if ($Text.Split(""`n"", [StringSplitOptions]::RemoveEmptyEntries).Count -gt 1) {
                    $needsIndentFix = $true
                }
            }
        }

        foreach ($aExtent in $extentList) {
            $aText = $Text

            if ($needsIndentFix) {
                # I'd rather let PSSA handle this when there are more formatting options.
                $indentOffset = ' ' * ($aExtent.StartColumnNumber - 1)
                $aText = $aText -split '\r?\n' `
                                -join ([Environment]::NewLine + $indentOffset)
            }
            $differenceOffset = $aText.Length - $aExtent.Text.Length
            $scriptText       = $fileContext.GetText()

            $fileContext.InsertText($aText, $aExtent)

            $newText = $scriptText.Remove($aExtent.StartOffset, $aExtent.Text.Length).Insert($aExtent.StartOffset, $aText)

            $timeoutLoop = 0
            while ($fileContext.GetText() -ne $newText) {
                Start-Sleep -Milliseconds 30
                $timeoutLoop++

                if ($timeoutLoop -gt 20) {
                    $PSCmdlet.WriteDebug(('Timed out waiting for change at range {0}, {1}' -f $aExtent.StartOffset,
                                                                                              $aExtent.EndOffset))
                    break
                }
            }

            if ($differenceOffset) {
                $extentList.ForEach({
                    if ($args[0].StartOffset -ge $aExtent.EndOffset) {
                        $args[0].AddOffset($differenceOffset)
                    }
                })
            }
        }
    }
","None",,"Set","ScriptExtent",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-ScriptExtent","Function","PowerShellEditorServices.Commands","0.2.0","Public","PowerShellEditorServices.Commands","PowerShellEditorServices.Commands","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"","
<# Options include:
     RelativeFilePaths - [bool]
         Always resolve file paths using Resolve-Path -Relative.
         The default is to use some heuristics to guess if relative or absolute is better.

   To customize your own custom options, pass a hashtable to CompleteInput, e.g.
         return [System.Management.Automation.CommandCompletion]::CompleteInput($inputScript, $cursorColumn,
             @{ RelativeFilePaths=$false }
#>

[CmdletBinding(DefaultParameterSetName = 'ScriptInputSet')]
Param(
    [Parameter(ParameterSetName = 'ScriptInputSet', Mandatory = $true, Position = 0)]
    [string] $inputScript,

    [Parameter(ParameterSetName = 'ScriptInputSet', Position = 1)]
    [int] $cursorColumn = $inputScript.Length,

    [Parameter(ParameterSetName = 'AstInputSet', Mandatory = $true, Position = 0)]
    [System.Management.Automation.Language.Ast] $ast,

    [Parameter(ParameterSetName = 'AstInputSet', Mandatory = $true, Position = 1)]
    [System.Management.Automation.Language.Token[]] $tokens,

    [Parameter(ParameterSetName = 'AstInputSet', Mandatory = $true, Position = 2)]
    [System.Management.Automation.Language.IScriptPosition] $positionOfCursor,

    [Parameter(ParameterSetName = 'ScriptInputSet', Position = 2)]
    [Parameter(ParameterSetName = 'AstInputSet', Position = 3)]
    [Hashtable] $options = $null
)

End
{
    if ($psCmdlet.ParameterSetName -eq 'ScriptInputSet')
    {
        return [System.Management.Automation.CommandCompletion]::CompleteInput(
            <#inputScript#>  $inputScript,
            <#cursorColumn#> $cursorColumn,
            <#options#>      $options)
    }
    else
    {
        return [System.Management.Automation.CommandCompletion]::CompleteInput(
            <#ast#>              $ast,
            <#tokens#>           $tokens,
            <#positionOfCursor#> $positionOfCursor,
            <#options#>          $options)
    }
}
        ","True","ScriptInputSet","
<# Options include:
     RelativeFilePaths - [bool]
         Always resolve file paths using Resolve-Path -Relative.
         The default is to use some heuristics to guess if relative or absolute is better.

   To customize your own custom options, pass a hashtable to CompleteInput, e.g.
         return [System.Management.Automation.CommandCompletion]::CompleteInput($inputScript, $cursorColumn,
             @{ RelativeFilePaths=$false }
#>

[CmdletBinding(DefaultParameterSetName = 'ScriptInputSet')]
Param(
    [Parameter(ParameterSetName = 'ScriptInputSet', Mandatory = $true, Position = 0)]
    [string] $inputScript,

    [Parameter(ParameterSetName = 'ScriptInputSet', Position = 1)]
    [int] $cursorColumn = $inputScript.Length,

    [Parameter(ParameterSetName = 'AstInputSet', Mandatory = $true, Position = 0)]
    [System.Management.Automation.Language.Ast] $ast,

    [Parameter(ParameterSetName = 'AstInputSet', Mandatory = $true, Position = 1)]
    [System.Management.Automation.Language.Token[]] $tokens,

    [Parameter(ParameterSetName = 'AstInputSet', Mandatory = $true, Position = 2)]
    [System.Management.Automation.Language.IScriptPosition] $positionOfCursor,

    [Parameter(ParameterSetName = 'ScriptInputSet', Position = 2)]
    [Parameter(ParameterSetName = 'AstInputSet', Position = 3)]
    [Hashtable] $options = $null
)

End
{
    if ($psCmdlet.ParameterSetName -eq 'ScriptInputSet')
    {
        return [System.Management.Automation.CommandCompletion]::CompleteInput(
            <#inputScript#>  $inputScript,
            <#cursorColumn#> $cursorColumn,
            <#options#>      $options)
    }
    else
    {
        return [System.Management.Automation.CommandCompletion]::CompleteInput(
            <#ast#>              $ast,
            <#tokens#>           $tokens,
            <#positionOfCursor#> $positionOfCursor,
            <#options#>          $options)
    }
}
        ","None",,"","",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","TabExpansion2","Function","",,"Public","",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"","","False",,"","None",,"Test","PlasterManifest",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Test-PlasterManifest","Function","Plaster","1.1.3","Public","Plaster","Plaster","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://github.com/PowerShell/PowerShellEditorServices/tree/master/module/docs/Test-ScriptExtent.md","
    <#
    .EXTERNALHELP ..\PowerShellEditorServices.Commands-help.xml
    #>
    [OutputType([bool], ParameterSetName='__AllParameterSets')]
    [OutputType([System.Management.Automation.Language.IScriptExtent], ParameterSetName='PassThru')]
    [CmdletBinding()]
    param(
        [Parameter(Position=0, ValueFromPipeline, ValueFromPipelineByPropertyName)]
        [ValidateNotNullOrEmpty()]
        [System.Management.Automation.Language.IScriptExtent]
        $Extent,

        [ValidateNotNullOrEmpty()]
        [System.Management.Automation.Language.IScriptExtent]
        $Inside,

        [ValidateNotNullOrEmpty()]
        [System.Management.Automation.Language.IScriptExtent]
        $After,

        [ValidateNotNullOrEmpty()]
        [System.Management.Automation.Language.IScriptExtent]
        $Before,

        [Parameter(ParameterSetName='PassThru')]
        [switch]
        $PassThru
    )
    process {
        if (-not $Extent) { return $false }
        $passes = (-not $After  -or  $Extent.StartOffset -gt $After.EndOffset)    -and
                  (-not $Before -or  $Extent.EndOffset   -lt $Before.StartOffset) -and
                  (-not $Inside -or ($Extent.StartOffset -ge $Inside.StartOffset  -and
                                     $Extent.EndOffset   -le $Inside.EndOffset))

        if (-not $PassThru.IsPresent) { return $passes }

        if ($passes) {
            $Extent # yield
        }
    }
","True",,"
    <#
    .EXTERNALHELP ..\PowerShellEditorServices.Commands-help.xml
    #>
    [OutputType([bool], ParameterSetName='__AllParameterSets')]
    [OutputType([System.Management.Automation.Language.IScriptExtent], ParameterSetName='PassThru')]
    [CmdletBinding()]
    param(
        [Parameter(Position=0, ValueFromPipeline, ValueFromPipelineByPropertyName)]
        [ValidateNotNullOrEmpty()]
        [System.Management.Automation.Language.IScriptExtent]
        $Extent,

        [ValidateNotNullOrEmpty()]
        [System.Management.Automation.Language.IScriptExtent]
        $Inside,

        [ValidateNotNullOrEmpty()]
        [System.Management.Automation.Language.IScriptExtent]
        $After,

        [ValidateNotNullOrEmpty()]
        [System.Management.Automation.Language.IScriptExtent]
        $Before,

        [Parameter(ParameterSetName='PassThru')]
        [switch]
        $PassThru
    )
    process {
        if (-not $Extent) { return $false }
        $passes = (-not $After  -or  $Extent.StartOffset -gt $After.EndOffset)    -and
                  (-not $Before -or  $Extent.EndOffset   -lt $Before.StartOffset) -and
                  (-not $Inside -or ($Extent.StartOffset -ge $Inside.StartOffset  -and
                                     $Extent.EndOffset   -le $Inside.EndOffset))

        if (-not $PassThru.IsPresent) { return $passes }

        if ($passes) {
            $Extent # yield
        }
    }
","None",,"Test","ScriptExtent",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Test-ScriptExtent","Function","PowerShellEditorServices.Commands","0.2.0","Public","PowerShellEditorServices.Commands","PowerShellEditorServices.Commands","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"","","False",,"","None",,"Test","ScriptFileInfo",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Test-ScriptFileInfo","Function","PowerShellGet","2.2.5","Public","PowerShellGet","PowerShellGet","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"","","False",,"","None",,"Uninstall","Module",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Uninstall-Module","Function","PowerShellGet","2.2.5","Public","PowerShellGet","PowerShellGet","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"","","False",,"","None",,"Uninstall","Script",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Uninstall-Script","Function","PowerShellGet","2.2.5","Public","PowerShellGet","PowerShellGet","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://github.com/PowerShell/PowerShellEditorServices/tree/master/module/docs/Unregister-EditorCommand.md","
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]$Name
    )

    Process
    {
        Write-Verbose ""Unregistering command '$Name'""
        $psEditor.UnregisterCommand($Name);
    }
","True",,"
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]$Name
    )

    Process
    {
        Write-Verbose ""Unregistering command '$Name'""
        $psEditor.UnregisterCommand($Name);
    }
","None",,"Unregister","EditorCommand",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Unregister-EditorCommand","Function","PowerShellEditorServices.Commands","0.2.0","Public","PowerShellEditorServices.Commands","PowerShellEditorServices.Commands","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"","","False",,"","None",,"Unregister","PSRepository",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Unregister-PSRepository","Function","PowerShellGet","2.2.5","Public","PowerShellGet","PowerShellGet","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"","","False",,"","None",,"Update","Module",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Update-Module","Function","PowerShellGet","2.2.5","Public","PowerShellGet","PowerShellGet","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"","","False",,"","None",,"Update","ModuleManifest",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Update-ModuleManifest","Function","PowerShellGet","2.2.5","Public","PowerShellGet","PowerShellGet","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"","","False",,"","None",,"Update","Script",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Update-Script","Function","PowerShellGet","2.2.5","Public","PowerShellGet","PowerShellGet","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"","","False",,"","None",,"Update","ScriptFileInfo",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Update-ScriptFileInfo","Function","PowerShellGet","2.2.5","Public","PowerShellGet","PowerShellGet","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?linkid=2096489",,,"Path","
Add-Content [-Path] <string[]> [-Value] <Object[]> [-PassThru] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Force] [-Credential <pscredential>] [-WhatIf] [-Confirm] [-NoNewline] [-Encoding <Encoding>] [-AsByteStream] [<CommonParameters>]

Add-Content [-Value] <Object[]> -LiteralPath <string[]> [-PassThru] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Force] [-Credential <pscredential>] [-WhatIf] [-Confirm] [-NoNewline] [-Encoding <Encoding>] [-AsByteStream] [<CommonParameters>]
","ReadOnly",,"Add","Content","Microsoft.PowerShell.Commands.Management.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-Content","Cmdlet","Microsoft.PowerShell.Management","7.0.0.0","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096479",,,,"
Add-History [[-InputObject] <psobject[]>] [-Passthru] [<CommonParameters>]
","ReadOnly",,"Add","History","System.Management.Automation.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-History","Cmdlet","Microsoft.PowerShell.Core","7.1.3.0","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2097109",,,"TypeNameSet","
Add-Member -InputObject <psobject> -TypeName <string> [-PassThru] [<CommonParameters>]

Add-Member [-MemberType] <PSMemberTypes> [-Name] <string> [[-Value] <Object>] [[-SecondValue] <Object>] -InputObject <psobject> [-TypeName <string>] [-Force] [-PassThru] [<CommonParameters>]

Add-Member [-NotePropertyName] <string> [-NotePropertyValue] <Object> -InputObject <psobject> [-TypeName <string>] [-Force] [-PassThru] [<CommonParameters>]

Add-Member [-NotePropertyMembers] <IDictionary> -InputObject <psobject> [-TypeName <string>] [-Force] [-PassThru] [<CommonParameters>]
","ReadOnly",,"Add","Member","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-Member","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096601",,,"FromSource","
Add-Type [-TypeDefinition] <string> [-Language <Language>] [-ReferencedAssemblies <string[]>] [-OutputAssembly <string>] [-OutputType <OutputAssemblyType>] [-PassThru] [-IgnoreWarnings] [-CompilerOptions <string[]>] [<CommonParameters>]

Add-Type [-Name] <string> [-MemberDefinition] <string[]> [-Namespace <string>] [-UsingNamespace <string[]>] [-Language <Language>] [-ReferencedAssemblies <string[]>] [-OutputAssembly <string>] [-OutputType <OutputAssemblyType>] [-PassThru] [-IgnoreWarnings] [-CompilerOptions <string[]>] [<CommonParameters>]

Add-Type [-Path] <string[]> [-ReferencedAssemblies <string[]>] [-OutputAssembly <string>] [-OutputType <OutputAssemblyType>] [-PassThru] [-IgnoreWarnings] [-CompilerOptions <string[]>] [<CommonParameters>]

Add-Type -LiteralPath <string[]> [-ReferencedAssemblies <string[]>] [-OutputAssembly <string>] [-OutputType <OutputAssemblyType>] [-PassThru] [-IgnoreWarnings] [-CompilerOptions <string[]>] [<CommonParameters>]

Add-Type -AssemblyName <string[]> [-PassThru] [<CommonParameters>]
","ReadOnly",,"Add","Type","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Add-Type","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096807",,,"Path","
Clear-Content [-Path] <string[]> [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Force] [-Credential <pscredential>] [-WhatIf] [-Confirm] [<CommonParameters>]

Clear-Content -LiteralPath <string[]> [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Force] [-Credential <pscredential>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"Clear","Content","Microsoft.PowerShell.Commands.Management.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Clear-Content","Cmdlet","Microsoft.PowerShell.Management","7.0.0.0","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096691",,,"IDParameter","
Clear-History [[-Id] <int[]>] [[-Count] <int>] [-Newest] [-WhatIf] [-Confirm] [<CommonParameters>]

Clear-History [[-Count] <int>] [-CommandLine <string[]>] [-Newest] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"Clear","History","System.Management.Automation.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Clear-History","Cmdlet","Microsoft.PowerShell.Core","7.1.3.0","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096491",,,"Path","
Clear-Item [-Path] <string[]> [-Force] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Credential <pscredential>] [-WhatIf] [-Confirm] [<CommonParameters>]

Clear-Item -LiteralPath <string[]> [-Force] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Credential <pscredential>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"Clear","Item","Microsoft.PowerShell.Commands.Management.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Clear-Item","Cmdlet","Microsoft.PowerShell.Management","7.0.0.0","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096903",,,"Path","
Clear-ItemProperty [-Path] <string[]> [-Name] <string> [-PassThru] [-Force] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Credential <pscredential>] [-WhatIf] [-Confirm] [<CommonParameters>]

Clear-ItemProperty [-Name] <string> -LiteralPath <string[]> [-PassThru] [-Force] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Credential <pscredential>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"Clear","ItemProperty","Microsoft.PowerShell.Commands.Management.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Clear-ItemProperty","Cmdlet","Microsoft.PowerShell.Management","7.0.0.0","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096923",,,,"
Clear-Variable [-Name] <string[]> [-Include <string[]>] [-Exclude <string[]>] [-Force] [-PassThru] [-Scope <string>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"Clear","Variable","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Clear-Variable","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,"
Close-VSCodeHtmlContentView [-HtmlContentView] <IHtmlContentView> [<CommonParameters>]
","ReadOnly",,"Close","VSCodeHtmlContentView","/Users/jakaran/.vscode/extensions/ms-vscode.powershell-2021.6.2/modules/PowerShellEditorServices.VSCode/en-US/Microsoft.PowerShell.EditorServices.VSCode.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Close-VSCodeHtmlContentView","Cmdlet","PowerShellEditorServices.VSCode","0.2.0","Public","PowerShellEditorServices.VSCode","PowerShellEditorServices.VSCode","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096605",,,,"
Compare-Object [-ReferenceObject] <psobject[]> [-DifferenceObject] <psobject[]> [-SyncWindow <int>] [-Property <Object[]>] [-ExcludeDifferent] [-IncludeEqual] [-PassThru] [-Culture <string>] [-CaseSensitive] [<CommonParameters>]
","ReadOnly",,"Compare","Object","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Compare-Object","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096588",,,"Path","
Convert-Path [-Path] <string[]> [<CommonParameters>]

Convert-Path -LiteralPath <string[]> [<CommonParameters>]
","ReadOnly",,"Convert","Path","Microsoft.PowerShell.Commands.Management.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Convert-Path","Cmdlet","Microsoft.PowerShell.Management","7.0.0.0","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096830",,,"Delimiter","
ConvertFrom-Csv [-InputObject] <psobject[]> [[-Delimiter] <char>] [-Header <string[]>] [<CommonParameters>]

ConvertFrom-Csv [-InputObject] <psobject[]> -UseCulture [-Header <string[]>] [<CommonParameters>]
","ReadOnly",,"ConvertFrom","Csv","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","ConvertFrom-Csv","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096606",,,,"
ConvertFrom-Json [-InputObject] <string> [-AsHashtable] [-Depth <int>] [-NoEnumerate] [<CommonParameters>]
","ReadOnly",,"ConvertFrom","Json","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","ConvertFrom-Json","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?linkid=2006503",,,"PathParamSet","
ConvertFrom-Markdown [-Path] <string[]> [-AsVT100EncodedString] [<CommonParameters>]

ConvertFrom-Markdown -LiteralPath <string[]> [-AsVT100EncodedString] [<CommonParameters>]

ConvertFrom-Markdown -InputObject <psobject> [-AsVT100EncodedString] [<CommonParameters>]
","ReadOnly",,"ConvertFrom","Markdown","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","ConvertFrom-Markdown","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,"__AllParameterSets","ConvertFrom-SecureString
","ReadOnly",,"ConvertFrom","SecureString",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","ConvertFrom-SecureString","Cmdlet","Microsoft.PowerShell.Security","7.0.0.0","Public","Microsoft.PowerShell.Security","Microsoft.PowerShell.Security","PowerShell",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096602",,,,"
ConvertFrom-StringData [-StringData] <string> [[-Delimiter] <char>] [<CommonParameters>]
","ReadOnly",,"ConvertFrom","StringData","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","ConvertFrom-StringData","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096832",,,"Delimiter","
ConvertTo-Csv [-InputObject] <psobject> [[-Delimiter] <char>] [-IncludeTypeInformation] [-NoTypeInformation] [-QuoteFields <string[]>] [-UseQuotes <BaseCsvWritingCommand+QuoteKind>] [<CommonParameters>]

ConvertTo-Csv [-InputObject] <psobject> [-UseCulture] [-IncludeTypeInformation] [-NoTypeInformation] [-QuoteFields <string[]>] [-UseQuotes <BaseCsvWritingCommand+QuoteKind>] [<CommonParameters>]
","ReadOnly",,"ConvertTo","Csv","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","ConvertTo-Csv","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096595",,,"Page","
ConvertTo-Html [[-Property] <Object[]>] [[-Head] <string[]>] [[-Title] <string>] [[-Body] <string[]>] [-InputObject <psobject>] [-As <string>] [-CssUri <uri>] [-PostContent <string[]>] [-PreContent <string[]>] [-Meta <hashtable>] [-Charset <string>] [-Transitional] [<CommonParameters>]

ConvertTo-Html [[-Property] <Object[]>] [-InputObject <psobject>] [-As <string>] [-Fragment] [-PostContent <string[]>] [-PreContent <string[]>] [<CommonParameters>]
","ReadOnly",,"ConvertTo","Html","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","ConvertTo-Html","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096925",,,,"
ConvertTo-Json [-InputObject] <Object> [-Depth <int>] [-Compress] [-EnumsAsStrings] [-AsArray] [-EscapeHandling <StringEscapeHandling>] [<CommonParameters>]
","ReadOnly",,"ConvertTo","Json","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","ConvertTo-Json","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,"__AllParameterSets","ConvertTo-SecureString
","ReadOnly",,"ConvertTo","SecureString",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","ConvertTo-SecureString","Cmdlet","Microsoft.PowerShell.Security","7.0.0.0","Public","Microsoft.PowerShell.Security","Microsoft.PowerShell.Security","PowerShell",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096603",,,,"
ConvertTo-Xml [-InputObject] <psobject> [-Depth <int>] [-NoTypeInformation] [-As <string>] [<CommonParameters>]
","ReadOnly",,"ConvertTo","Xml","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","ConvertTo-Xml","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096990",,,"Path","
Copy-Item [-Path] <string[]> [[-Destination] <string>] [-Container] [-Force] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Recurse] [-PassThru] [-Credential <pscredential>] [-WhatIf] [-Confirm] [-FromSession <PSSession>] [-ToSession <PSSession>] [<CommonParameters>]

Copy-Item [[-Destination] <string>] -LiteralPath <string[]> [-Container] [-Force] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Recurse] [-PassThru] [-Credential <pscredential>] [-WhatIf] [-Confirm] [-FromSession <PSSession>] [-ToSession <PSSession>] [<CommonParameters>]
","ReadOnly",,"Copy","Item","Microsoft.PowerShell.Commands.Management.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Copy-Item","Cmdlet","Microsoft.PowerShell.Management","7.0.0.0","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096589",,,"Path","
Copy-ItemProperty [-Path] <string[]> [-Destination] <string> [-Name] <string> [-PassThru] [-Force] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Credential <pscredential>] [-WhatIf] [-Confirm] [<CommonParameters>]

Copy-ItemProperty [-Destination] <string> [-Name] <string> -LiteralPath <string[]> [-PassThru] [-Force] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Credential <pscredential>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"Copy","ItemProperty","Microsoft.PowerShell.Commands.Management.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Copy-ItemProperty","Cmdlet","Microsoft.PowerShell.Management","7.0.0.0","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkId=330208",,,"JobParameterSet","
Debug-Job [-Job] <Job> [-WhatIf] [-Confirm] [<CommonParameters>]

Debug-Job [-Name] <string> [-WhatIf] [-Confirm] [<CommonParameters>]

Debug-Job [-Id] <int> [-WhatIf] [-Confirm] [<CommonParameters>]

Debug-Job [-InstanceId] <guid> [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"Debug","Job","System.Management.Automation.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Debug-Job","Cmdlet","Microsoft.PowerShell.Core","7.1.3.0","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096809",,,"Name","
Debug-Process [-Name] <string[]> [-WhatIf] [-Confirm] [<CommonParameters>]

Debug-Process [-Id] <int[]> [-WhatIf] [-Confirm] [<CommonParameters>]

Debug-Process -InputObject <Process[]> [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"Debug","Process","Microsoft.PowerShell.Commands.Management.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Debug-Process","Cmdlet","Microsoft.PowerShell.Management","7.0.0.0","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkId=2096917",,,"RunspaceParameterSet","
Debug-Runspace [-Runspace] <runspace> [-WhatIf] [-Confirm] [<CommonParameters>]

Debug-Runspace [-Name] <string> [-WhatIf] [-Confirm] [<CommonParameters>]

Debug-Runspace [-Id] <int> [-WhatIf] [-Confirm] [<CommonParameters>]

Debug-Runspace [-InstanceId] <guid> [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"Debug","Runspace","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Debug-Runspace","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2046963",,,,"
Disable-ExperimentalFeature [-Name] <string[]> [-Scope <ConfigScope>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"Disable","ExperimentalFeature","System.Management.Automation.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-ExperimentalFeature","Cmdlet","Microsoft.PowerShell.Core","7.1.3.0","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096498",,,"Breakpoint","
Disable-PSBreakpoint [-Breakpoint] <Breakpoint[]> [-PassThru] [-WhatIf] [-Confirm] [<CommonParameters>]

Disable-PSBreakpoint [-Id] <int[]> [-PassThru] [-Runspace <runspace>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"Disable","PSBreakpoint","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-PSBreakpoint","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkId=2096924",,,"RunspaceNameParameterSet","
Disable-RunspaceDebug [[-RunspaceName] <string[]>] [<CommonParameters>]

Disable-RunspaceDebug [-Runspace] <runspace[]> [<CommonParameters>]

Disable-RunspaceDebug [-RunspaceId] <int[]> [<CommonParameters>]

Disable-RunspaceDebug [-RunspaceInstanceId] <guid[]> [<CommonParameters>]

Disable-RunspaceDebug [[-ProcessName] <string>] [[-AppDomainName] <string[]>] [<CommonParameters>]
","ReadOnly",,"Disable","RunspaceDebug","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Disable-RunspaceDebug","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2046964",,,,"
Enable-ExperimentalFeature [-Name] <string[]> [-Scope <ConfigScope>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"Enable","ExperimentalFeature","System.Management.Automation.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-ExperimentalFeature","Cmdlet","Microsoft.PowerShell.Core","7.1.3.0","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096700",,,"Breakpoint","
Enable-PSBreakpoint [-Breakpoint] <Breakpoint[]> [-PassThru] [-WhatIf] [-Confirm] [<CommonParameters>]

Enable-PSBreakpoint [-Id] <int[]> [-PassThru] [-Runspace <runspace>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"Enable","PSBreakpoint","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-PSBreakpoint","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkId=2096831",,,"RunspaceNameParameterSet","
Enable-RunspaceDebug [[-RunspaceName] <string[]>] [-BreakAll] [<CommonParameters>]

Enable-RunspaceDebug [-Runspace] <runspace[]> [-BreakAll] [<CommonParameters>]

Enable-RunspaceDebug [-RunspaceId] <int[]> [-BreakAll] [<CommonParameters>]

Enable-RunspaceDebug [-RunspaceInstanceId] <guid[]> [<CommonParameters>]

Enable-RunspaceDebug [[-ProcessName] <string>] [[-AppDomainName] <string[]>] [<CommonParameters>]
","ReadOnly",,"Enable","RunspaceDebug","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enable-RunspaceDebug","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkId=2096580",,,"ProcessIdParameterSet","
Enter-PSHostProcess [-Id] <int> [[-AppDomainName] <string>] [<CommonParameters>]

Enter-PSHostProcess [-Process] <Process> [[-AppDomainName] <string>] [<CommonParameters>]

Enter-PSHostProcess [-Name] <string> [[-AppDomainName] <string>] [<CommonParameters>]

Enter-PSHostProcess [-HostProcessInfo] <PSHostProcessInfo> [[-AppDomainName] <string>] [<CommonParameters>]

Enter-PSHostProcess -CustomPipeName <string> [<CommonParameters>]
","ReadOnly",,"Enter","PSHostProcess","System.Management.Automation.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enter-PSHostProcess","Cmdlet","Microsoft.PowerShell.Core","7.1.3.0","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096695",,,"ComputerName","
Enter-PSSession [-ComputerName] <string> [-EnableNetworkAccess] [-Credential <pscredential>] [-ConfigurationName <string>] [-Port <int>] [-UseSSL] [-ApplicationName <string>] [-SessionOption <PSSessionOption>] [-Authentication <AuthenticationMechanism>] [-CertificateThumbprint <string>] [<CommonParameters>]

Enter-PSSession [-HostName] <string> [-Port <int>] [-UserName <string>] [-KeyFilePath <string>] [-SSHTransport] [-Subsystem <string>] [<CommonParameters>]

Enter-PSSession [[-Session] <PSSession>] [<CommonParameters>]

Enter-PSSession [[-ConnectionUri] <uri>] [-EnableNetworkAccess] [-Credential <pscredential>] [-ConfigurationName <string>] [-AllowRedirection] [-SessionOption <PSSessionOption>] [-Authentication <AuthenticationMechanism>] [-CertificateThumbprint <string>] [<CommonParameters>]

Enter-PSSession [-InstanceId <guid>] [<CommonParameters>]

Enter-PSSession [[-Id] <int>] [<CommonParameters>]

Enter-PSSession [-Name <string>] [<CommonParameters>]

Enter-PSSession [-VMId] <guid> [-Credential] <pscredential> [-ConfigurationName <string>] [<CommonParameters>]

Enter-PSSession [-VMName] <string> [-Credential] <pscredential> [-ConfigurationName <string>] [<CommonParameters>]

Enter-PSSession [-ContainerId] <string> [-ConfigurationName <string>] [-RunAsAdministrator] [<CommonParameters>]
","ReadOnly",,"Enter","PSSession","System.Management.Automation.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Enter-PSSession","Cmdlet","Microsoft.PowerShell.Core","7.1.3.0","Public","Microsoft.PowerShell.Core",,"OwnedByCommand","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkId=2096583",,,,"
Exit-PSHostProcess [<CommonParameters>]
","ReadOnly",,"Exit","PSHostProcess","System.Management.Automation.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Exit-PSHostProcess","Cmdlet","Microsoft.PowerShell.Core","7.1.3.0","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096787",,,,"
Exit-PSSession [<CommonParameters>]
","ReadOnly",,"Exit","PSSession","System.Management.Automation.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Exit-PSSession","Cmdlet","Microsoft.PowerShell.Core","7.1.3.0","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096597",,,"ByPath","
Export-Alias [-Path] <string> [[-Name] <string[]>] [-PassThru] [-As <ExportAliasFormat>] [-Append] [-Force] [-NoClobber] [-Description <string>] [-Scope <string>] [-WhatIf] [-Confirm] [<CommonParameters>]

Export-Alias [[-Name] <string[]>] -LiteralPath <string> [-PassThru] [-As <ExportAliasFormat>] [-Append] [-Force] [-NoClobber] [-Description <string>] [-Scope <string>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"Export","Alias","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Export-Alias","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096926",,,"ByPath","
Export-Clixml [-Path] <string> -InputObject <psobject> [-Depth <int>] [-Force] [-NoClobber] [-Encoding <Encoding>] [-WhatIf] [-Confirm] [<CommonParameters>]

Export-Clixml -LiteralPath <string> -InputObject <psobject> [-Depth <int>] [-Force] [-NoClobber] [-Encoding <Encoding>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"Export","Clixml","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Export-Clixml","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096608",,,"Delimiter","
Export-Csv [[-Path] <string>] [[-Delimiter] <char>] -InputObject <psobject> [-LiteralPath <string>] [-Force] [-NoClobber] [-Encoding <Encoding>] [-Append] [-IncludeTypeInformation] [-NoTypeInformation] [-QuoteFields <string[]>] [-UseQuotes <BaseCsvWritingCommand+QuoteKind>] [-WhatIf] [-Confirm] [<CommonParameters>]

Export-Csv [[-Path] <string>] -InputObject <psobject> [-LiteralPath <string>] [-Force] [-NoClobber] [-Encoding <Encoding>] [-Append] [-UseCulture] [-IncludeTypeInformation] [-NoTypeInformation] [-QuoteFields <string[]>] [-UseQuotes <BaseCsvWritingCommand+QuoteKind>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"Export","Csv","/Users/jakaran/.local/share/powershell/Help/en-US/Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Export-Csv","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096834",,,"ByPath","
Export-FormatData -InputObject <ExtendedTypeDefinition[]> -Path <string> [-Force] [-NoClobber] [-IncludeScriptBlock] [<CommonParameters>]

Export-FormatData -InputObject <ExtendedTypeDefinition[]> -LiteralPath <string> [-Force] [-NoClobber] [-IncludeScriptBlock] [<CommonParameters>]
","ReadOnly",,"Export","FormatData","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Export-FormatData","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096578",,,,"
Export-ModuleMember [[-Function] <string[]>] [-Cmdlet <string[]>] [-Variable <string[]>] [-Alias <string[]>] [<CommonParameters>]
","ReadOnly",,"Export","ModuleMember","System.Management.Automation.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Export-ModuleMember","Cmdlet","Microsoft.PowerShell.Core","7.1.3.0","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096604",,,,"
Export-PSSession [-Session] <PSSession> [-OutputModule] <string> [[-CommandName] <string[]>] [[-FormatTypeName] <string[]>] [-Force] [-Encoding <Encoding>] [-AllowClobber] [-ArgumentList <Object[]>] [-CommandType <CommandTypes>] [-Module <string[]>] [-FullyQualifiedModule <ModuleSpecification[]>] [-Certificate <X509Certificate2>] [<CommonParameters>]
","ReadOnly",,"Export","PSSession","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Export-PSSession","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,"__AllParameterSets","Find-Package
","ReadOnly",,"Find","Package",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Find-Package","Cmdlet","PackageManagement","1.4.7","Public","PackageManagement","PackageManagement","PowerShell",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,"__AllParameterSets","Find-PackageProvider
","ReadOnly",,"Find","PackageProvider",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Find-PackageProvider","Cmdlet","PackageManagement","1.4.7","Public","PackageManagement","PackageManagement","PowerShell",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096867",,,"ScriptBlockSet","
ForEach-Object [-Process] <scriptblock[]> [-InputObject <psobject>] [-Begin <scriptblock>] [-End <scriptblock>] [-RemainingScripts <scriptblock[]>] [-WhatIf] [-Confirm] [<CommonParameters>]

ForEach-Object [-MemberName] <string> [-InputObject <psobject>] [-ArgumentList <Object[]>] [-WhatIf] [-Confirm] [<CommonParameters>]

ForEach-Object -Parallel <scriptblock> [-InputObject <psobject>] [-ThrottleLimit <int>] [-TimeoutSeconds <int>] [-AsJob] [-UseNewRunspace] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"ForEach","Object","System.Management.Automation.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","ForEach-Object","Cmdlet","Microsoft.PowerShell.Core","7.1.3.0","Public","Microsoft.PowerShell.Core",,"None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096929",,,,"
Format-Custom [[-Property] <Object[]>] [-Depth <int>] [-GroupBy <Object>] [-View <string>] [-ShowError] [-DisplayError] [-Force] [-Expand <string>] [-InputObject <psobject>] [<CommonParameters>]
","ReadOnly",,"Format","Custom","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Format-Custom","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkId=2096611",,,,"
Format-Hex [-Path] <string[]> [-Count <long>] [-Offset <long>] [<CommonParameters>]

Format-Hex -LiteralPath <string[]> [-Count <long>] [-Offset <long>] [<CommonParameters>]

Format-Hex -InputObject <psobject> [-Encoding <Encoding>] [-Count <long>] [-Offset <long>] [-Raw] [<CommonParameters>]
","ReadOnly",,"Format","Hex","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Format-Hex","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096928",,,,"
Format-List [[-Property] <Object[]>] [-GroupBy <Object>] [-View <string>] [-ShowError] [-DisplayError] [-Force] [-Expand <string>] [-InputObject <psobject>] [<CommonParameters>]
","ReadOnly",,"Format","List","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Format-List","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096703",,,,"
Format-Table [[-Property] <Object[]>] [-AutoSize] [-RepeatHeader] [-HideTableHeaders] [-Wrap] [-GroupBy <Object>] [-View <string>] [-ShowError] [-DisplayError] [-Force] [-Expand <string>] [-InputObject <psobject>] [<CommonParameters>]
","ReadOnly",,"Format","Table","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Format-Table","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096930",,,,"
Format-Wide [[-Property] <Object>] [-AutoSize] [-Column <int>] [-GroupBy <Object>] [-View <string>] [-ShowError] [-DisplayError] [-Force] [-Expand <string>] [-InputObject <psobject>] [<CommonParameters>]
","ReadOnly",,"Format","Wide","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Format-Wide","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096702",,,"Default","
Get-Alias [[-Name] <string[]>] [-Exclude <string[]>] [-Scope <string>] [<CommonParameters>]

Get-Alias [-Exclude <string[]>] [-Scope <string>] [-Definition <string[]>] [<CommonParameters>]
","ReadOnly",,"Get","Alias","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Alias","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096492",,,"Items","
Get-ChildItem [[-Path] <string[]>] [[-Filter] <string>] [-Include <string[]>] [-Exclude <string[]>] [-Recurse] [-Depth <uint>] [-Force] [-Name] [-Attributes <FlagsExpression[FileAttributes]>] [-FollowSymlink] [-Directory] [-File] [-Hidden] [-ReadOnly] [-System] [<CommonParameters>]

Get-ChildItem [[-Filter] <string>] -LiteralPath <string[]> [-Include <string[]>] [-Exclude <string[]>] [-Recurse] [-Depth <uint>] [-Force] [-Name] [-Attributes <FlagsExpression[FileAttributes]>] [-FollowSymlink] [-Directory] [-File] [-Hidden] [-ReadOnly] [-System] [<CommonParameters>]
","ReadOnly",,"Get","ChildItem","Microsoft.PowerShell.Commands.Management.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-ChildItem","Cmdlet","Microsoft.PowerShell.Management","7.0.0.0","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkId=2109905",,,,"
Get-Clipboard [-Raw] [<CommonParameters>]
","ReadOnly",,"Get","Clipboard","Microsoft.PowerShell.Commands.Management.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Clipboard","Cmdlet","Microsoft.PowerShell.Management","7.0.0.0","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,"__AllParameterSets","Get-CmsMessage
","ReadOnly",,"Get","CmsMessage",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-CmsMessage","Cmdlet","Microsoft.PowerShell.Security","7.0.0.0","Public","Microsoft.PowerShell.Security","Microsoft.PowerShell.Security","PowerShell",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096579",,,"CmdletSet","
Get-Command [[-ArgumentList] <Object[]>] [-Verb <string[]>] [-Noun <string[]>] [-Module <string[]>] [-FullyQualifiedModule <ModuleSpecification[]>] [-TotalCount <int>] [-Syntax] [-ShowCommandInfo] [-All] [-ListImported] [-ParameterName <string[]>] [-ParameterType <PSTypeName[]>] [<CommonParameters>]

Get-Command [[-Name] <string[]>] [[-ArgumentList] <Object[]>] [-Module <string[]>] [-FullyQualifiedModule <ModuleSpecification[]>] [-CommandType <CommandTypes>] [-TotalCount <int>] [-Syntax] [-ShowCommandInfo] [-All] [-ListImported] [-ParameterName <string[]>] [-ParameterType <PSTypeName[]>] [-UseFuzzyMatching] [-UseAbbreviationExpansion] [<CommonParameters>]
","ReadOnly",,"Get","Command","System.Management.Automation.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Command","Cmdlet","Microsoft.PowerShell.Core","7.1.3.0","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096490",,,"Path","
Get-Content [-Path] <string[]> [-ReadCount <long>] [-TotalCount <long>] [-Tail <int>] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Force] [-Credential <pscredential>] [-Delimiter <string>] [-Wait] [-Raw] [-Encoding <Encoding>] [-AsByteStream] [<CommonParameters>]

Get-Content -LiteralPath <string[]> [-ReadCount <long>] [-TotalCount <long>] [-Tail <int>] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Force] [-Credential <pscredential>] [-Delimiter <string>] [-Wait] [-Raw] [-Encoding <Encoding>] [-AsByteStream] [<CommonParameters>]
","ReadOnly",,"Get","Content","Microsoft.PowerShell.Commands.Management.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Content","Cmdlet","Microsoft.PowerShell.Management","7.0.0.0","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,"__AllParameterSets","Get-Credential
","ReadOnly",,"Get","Credential",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Credential","Cmdlet","Microsoft.PowerShell.Security","7.0.0.0","Public","Microsoft.PowerShell.Security","Microsoft.PowerShell.Security","PowerShell",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2097017",,,"CurrentCulture","
Get-Culture [-NoUserOverrides] [<CommonParameters>]

Get-Culture [[-Name] <string[]>] [-NoUserOverrides] [<CommonParameters>]

Get-Culture [-ListAvailable] [<CommonParameters>]
","ReadOnly",,"Get","Culture","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Culture","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096615",,,"DateAndFormat","
Get-Date [[-Date] <datetime>] [-Year <int>] [-Month <int>] [-Day <int>] [-Hour <int>] [-Minute <int>] [-Second <int>] [-Millisecond <int>] [-DisplayHint <DisplayHintType>] [-Format <string>] [-AsUTC] [<CommonParameters>]

Get-Date [[-Date] <datetime>] -UFormat <string> [-Year <int>] [-Month <int>] [-Day <int>] [-Hour <int>] [-Minute <int>] [-Second <int>] [-Millisecond <int>] [-DisplayHint <DisplayHintType>] [-AsUTC] [<CommonParameters>]

Get-Date -UnixTimeSeconds <long> -UFormat <string> [-Year <int>] [-Month <int>] [-Day <int>] [-Hour <int>] [-Minute <int>] [-Second <int>] [-Millisecond <int>] [-DisplayHint <DisplayHintType>] [-AsUTC] [<CommonParameters>]

Get-Date -UnixTimeSeconds <long> [-Year <int>] [-Month <int>] [-Day <int>] [-Hour <int>] [-Minute <int>] [-Second <int>] [-Millisecond <int>] [-DisplayHint <DisplayHintType>] [-Format <string>] [-AsUTC] [<CommonParameters>]
","ReadOnly",,"Get","Date","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Date","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://docs.microsoft.com/powershell/module/microsoft.powershell.utility/get-error",,,"Newest","
Get-Error [-Newest <int>] [<CommonParameters>]

Get-Error [[-InputObject] <psobject>] [<CommonParameters>]
","ReadOnly",,"Get","Error","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Error","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2097014",,,"BySource","
Get-Event [[-SourceIdentifier] <string>] [<CommonParameters>]

Get-Event [-EventIdentifier] <int> [<CommonParameters>]
","ReadOnly",,"Get","Event","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Event","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096607",,,"BySource","
Get-EventSubscriber [[-SourceIdentifier] <string>] [-Force] [<CommonParameters>]

Get-EventSubscriber [-SubscriptionId] <int> [-Force] [<CommonParameters>]
","ReadOnly",,"Get","EventSubscriber","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-EventSubscriber","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,"__AllParameterSets","Get-ExecutionPolicy
","ReadOnly",,"Get","ExecutionPolicy",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-ExecutionPolicy","Cmdlet","Microsoft.PowerShell.Security","7.0.0.0","Public","Microsoft.PowerShell.Security","Microsoft.PowerShell.Security","PowerShell",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?linkid=2096786",,,,"
Get-ExperimentalFeature [[-Name] <string[]>] [<CommonParameters>]
","ReadOnly",,"Get","ExperimentalFeature","System.Management.Automation.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-ExperimentalFeature","Cmdlet","Microsoft.PowerShell.Core","7.1.3.0","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkId=517145",,,"Path","
Get-FileHash [-Path] <string[]> [[-Algorithm] <string>] [<CommonParameters>]

Get-FileHash [-LiteralPath] <string[]> [[-Algorithm] <string>] [<CommonParameters>]

Get-FileHash [-InputStream] <Stream> [[-Algorithm] <string>] [<CommonParameters>]
","ReadOnly",,"Get","FileHash","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-FileHash","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096614",,,,"
Get-FormatData [[-TypeName] <string[]>] [-PowerShellVersion <version>] [<CommonParameters>]
","ReadOnly",,"Get","FormatData","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-FormatData","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096483",,,"AllUsersView","
Get-Help [[-Name] <string>] [-Path <string>] [-Category <string[]>] [-Full] [-Component <string[]>] [-Functionality <string[]>] [-Role <string[]>] [<CommonParameters>]

Get-Help [[-Name] <string>] -Detailed [-Path <string>] [-Category <string[]>] [-Component <string[]>] [-Functionality <string[]>] [-Role <string[]>] [<CommonParameters>]

Get-Help [[-Name] <string>] -Examples [-Path <string>] [-Category <string[]>] [-Component <string[]>] [-Functionality <string[]>] [-Role <string[]>] [<CommonParameters>]

Get-Help [[-Name] <string>] -Parameter <string[]> [-Path <string>] [-Category <string[]>] [-Component <string[]>] [-Functionality <string[]>] [-Role <string[]>] [<CommonParameters>]

Get-Help [[-Name] <string>] -Online [-Path <string>] [-Category <string[]>] [-Component <string[]>] [-Functionality <string[]>] [-Role <string[]>] [<CommonParameters>]
","ReadOnly",,"Get","Help","System.Management.Automation.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Help","Cmdlet","Microsoft.PowerShell.Core","7.1.3.0","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096788",,,,"
Get-History [[-Id] <long[]>] [[-Count] <int>] [<CommonParameters>]
","ReadOnly",,"Get","History","System.Management.Automation.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-History","Cmdlet","Microsoft.PowerShell.Core","7.1.3.0","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2097110",,,,"
Get-Host [<CommonParameters>]
","ReadOnly",,"Get","Host","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Host","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096812",,,"Path","
Get-Item [-Path] <string[]> [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Force] [-Credential <pscredential>] [<CommonParameters>]

Get-Item -LiteralPath <string[]> [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Force] [-Credential <pscredential>] [<CommonParameters>]
","ReadOnly",,"Get","Item","Microsoft.PowerShell.Commands.Management.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Item","Cmdlet","Microsoft.PowerShell.Management","7.0.0.0","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096493",,,"Path","
Get-ItemProperty [-Path] <string[]> [[-Name] <string[]>] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Credential <pscredential>] [<CommonParameters>]

Get-ItemProperty [[-Name] <string[]>] -LiteralPath <string[]> [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Credential <pscredential>] [<CommonParameters>]
","ReadOnly",,"Get","ItemProperty","Microsoft.PowerShell.Commands.Management.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-ItemProperty","Cmdlet","Microsoft.PowerShell.Management","7.0.0.0","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkId=2096906",,,"Path","
Get-ItemPropertyValue [[-Path] <string[]>] [-Name] <string[]> [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Credential <pscredential>] [<CommonParameters>]

Get-ItemPropertyValue [-Name] <string[]> -LiteralPath <string[]> [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Credential <pscredential>] [<CommonParameters>]
","ReadOnly",,"Get","ItemPropertyValue","Microsoft.PowerShell.Commands.Management.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-ItemPropertyValue","Cmdlet","Microsoft.PowerShell.Management","7.0.0.0","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096582",,,"SessionIdParameterSet","
Get-Job [[-Id] <int[]>] [-IncludeChildJob] [-ChildJobState <JobState>] [-HasMoreData <bool>] [-Before <datetime>] [-After <datetime>] [-Newest <int>] [<CommonParameters>]

Get-Job [-InstanceId] <guid[]> [-IncludeChildJob] [-ChildJobState <JobState>] [-HasMoreData <bool>] [-Before <datetime>] [-After <datetime>] [-Newest <int>] [<CommonParameters>]

Get-Job [-Name] <string[]> [-IncludeChildJob] [-ChildJobState <JobState>] [-HasMoreData <bool>] [-Before <datetime>] [-After <datetime>] [-Newest <int>] [<CommonParameters>]

Get-Job [-State] <JobState> [-IncludeChildJob] [-ChildJobState <JobState>] [-HasMoreData <bool>] [-Before <datetime>] [-After <datetime>] [-Newest <int>] [<CommonParameters>]

Get-Job [-IncludeChildJob] [-ChildJobState <JobState>] [-HasMoreData <bool>] [-Before <datetime>] [-After <datetime>] [-Newest <int>] [-Command <string[]>] [<CommonParameters>]

Get-Job [-Filter] <hashtable> [<CommonParameters>]
","ReadOnly",,"Get","Job","System.Management.Automation.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Job","Cmdlet","Microsoft.PowerShell.Core","7.1.3.0","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096495",,,"Location","
Get-Location [-PSProvider <string[]>] [-PSDrive <string[]>] [<CommonParameters>]

Get-Location [-Stack] [-StackName <string[]>] [<CommonParameters>]
","ReadOnly",,"Get","Location","Microsoft.PowerShell.Commands.Management.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Location","Cmdlet","Microsoft.PowerShell.Management","7.0.0.0","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?linkid=2006371",,,,"
Get-MarkdownOption [<CommonParameters>]
","ReadOnly",,"Get","MarkdownOption","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-MarkdownOption","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096704",,,,"
Get-Member [[-Name] <string[]>] [-InputObject <psobject>] [-MemberType <PSMemberTypes>] [-View <PSMemberViewTypes>] [-Static] [-Force] [<CommonParameters>]
","ReadOnly",,"Get","Member","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Member","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096696",,,"Loaded","
Get-Module [[-Name] <string[]>] [-FullyQualifiedName <ModuleSpecification[]>] [-All] [<CommonParameters>]

Get-Module [[-Name] <string[]>] -ListAvailable [-FullyQualifiedName <ModuleSpecification[]>] [-All] [-PSEdition <string>] [-SkipEditionCheck] [-Refresh] [<CommonParameters>]

Get-Module [[-Name] <string[]>] -PSSession <PSSession> [-FullyQualifiedName <ModuleSpecification[]>] [-ListAvailable] [-PSEdition <string>] [-SkipEditionCheck] [-Refresh] [<CommonParameters>]

Get-Module [[-Name] <string[]>] -CimSession <CimSession> [-FullyQualifiedName <ModuleSpecification[]>] [-ListAvailable] [-SkipEditionCheck] [-Refresh] [-CimResourceUri <uri>] [-CimNamespace <string>] [<CommonParameters>]
","ReadOnly",,"Get","Module","System.Management.Automation.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Module","Cmdlet","Microsoft.PowerShell.Core","7.1.3.0","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,"__AllParameterSets","Get-Package
","ReadOnly",,"Get","Package",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Package","Cmdlet","PackageManagement","1.4.7","Public","PackageManagement","PackageManagement","PowerShell",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,"__AllParameterSets","Get-PackageProvider
","ReadOnly",,"Get","PackageProvider",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-PackageProvider","Cmdlet","PackageManagement","1.4.7","Public","PackageManagement","PackageManagement","PowerShell",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,"__AllParameterSets","Get-PackageSource
","ReadOnly",,"Get","PackageSource",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-PackageSource","Cmdlet","PackageManagement","1.4.7","Public","PackageManagement","PackageManagement","PowerShell",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,"__AllParameterSets","Get-PfxCertificate
","ReadOnly",,"Get","PfxCertificate",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-PfxCertificate","Cmdlet","Microsoft.PowerShell.Security","7.0.0.0","Public","Microsoft.PowerShell.Security","Microsoft.PowerShell.Security","PowerShell",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096814",,,"Name","
Get-Process [[-Name] <string[]>] [-Module] [-FileVersionInfo] [<CommonParameters>]

Get-Process [[-Name] <string[]>] -IncludeUserName [<CommonParameters>]

Get-Process -Id <int[]> -IncludeUserName [<CommonParameters>]

Get-Process -Id <int[]> [-Module] [-FileVersionInfo] [<CommonParameters>]

Get-Process -InputObject <Process[]> -IncludeUserName [<CommonParameters>]

Get-Process -InputObject <Process[]> [-Module] [-FileVersionInfo] [<CommonParameters>]
","ReadOnly",,"Get","Process","Microsoft.PowerShell.Commands.Management.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Process","Cmdlet","Microsoft.PowerShell.Management","7.0.0.0","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","SupportedByCommand","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2097108",,,"Line","
Get-PSBreakpoint [[-Script] <string[]>] [<CommonParameters>]

Get-PSBreakpoint -Command <string[]> [-Script <string[]>] [<CommonParameters>]

Get-PSBreakpoint -Variable <string[]> [-Script <string[]>] [<CommonParameters>]

Get-PSBreakpoint [-Type] <BreakpointType[]> [-Script <string[]>] [<CommonParameters>]

Get-PSBreakpoint [-Id] <int[]> [<CommonParameters>]
","ReadOnly",,"Get","PSBreakpoint","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-PSBreakpoint","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096705",,,,"
Get-PSCallStack [<CommonParameters>]
","ReadOnly",,"Get","PSCallStack","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-PSCallStack","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096494",,,"Name","
Get-PSDrive [[-Name] <string[]>] [-Scope <string>] [-PSProvider <string[]>] [<CommonParameters>]

Get-PSDrive [-LiteralName] <string[]> [-Scope <string>] [-PSProvider <string[]>] [<CommonParameters>]
","ReadOnly",,"Get","PSDrive","Microsoft.PowerShell.Commands.Management.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-PSDrive","Cmdlet","Microsoft.PowerShell.Management","7.0.0.0","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkId=517012",,,"ProcessNameParameterSet","
Get-PSHostProcessInfo [[-Name] <string[]>] [<CommonParameters>]

Get-PSHostProcessInfo [-Process] <Process[]> [<CommonParameters>]

Get-PSHostProcessInfo [-Id] <int[]> [<CommonParameters>]
","ReadOnly",,"Get","PSHostProcessInfo","System.Management.Automation.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-PSHostProcessInfo","Cmdlet","Microsoft.PowerShell.Core","7.1.3.0","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096816",,,,"
Get-PSProvider [[-PSProvider] <string[]>] [<CommonParameters>]
","ReadOnly",,"Get","PSProvider","Microsoft.PowerShell.Commands.Management.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-PSProvider","Cmdlet","Microsoft.PowerShell.Management","7.0.0.0","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkId=528807",,,"FullListing","
Get-PSReadLineKeyHandler [-Bound] [-Unbound] [<CommonParameters>]

Get-PSReadLineKeyHandler [-Chord] <string[]> [<CommonParameters>]
","ReadOnly",,"Get","PSReadLineKeyHandler","Microsoft.PowerShell.PSReadLine2.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-PSReadLineKeyHandler","Cmdlet","PSReadLine","2.1.0","Public","PSReadLine","PSReadLine","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkId=528808",,,,"
Get-PSReadLineOption [<CommonParameters>]
","ReadOnly",,"Get","PSReadLineOption","Microsoft.PowerShell.PSReadLine2.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-PSReadLineOption","Cmdlet","PSReadLine","2.1.0","Public","PSReadLine","PSReadLine","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096697",,,"Name","
Get-PSSession [-Name <string[]>] [<CommonParameters>]

Get-PSSession [-ComputerName] <string[]> -InstanceId <guid[]> [-ApplicationName <string>] [-ConfigurationName <string>] [-Credential <pscredential>] [-Authentication <AuthenticationMechanism>] [-CertificateThumbprint <string>] [-Port <int>] [-UseSSL] [-ThrottleLimit <int>] [-State <SessionFilterState>] [-SessionOption <PSSessionOption>] [<CommonParameters>]

Get-PSSession [-ComputerName] <string[]> [-ApplicationName <string>] [-ConfigurationName <string>] [-Name <string[]>] [-Credential <pscredential>] [-Authentication <AuthenticationMechanism>] [-CertificateThumbprint <string>] [-Port <int>] [-UseSSL] [-ThrottleLimit <int>] [-State <SessionFilterState>] [-SessionOption <PSSessionOption>] [<CommonParameters>]

Get-PSSession [-ConnectionUri] <uri[]> -InstanceId <guid[]> [-ConfigurationName <string>] [-AllowRedirection] [-Credential <pscredential>] [-Authentication <AuthenticationMechanism>] [-CertificateThumbprint <string>] [-ThrottleLimit <int>] [-State <SessionFilterState>] [-SessionOption <PSSessionOption>] [<CommonParameters>]

Get-PSSession [-ConnectionUri] <uri[]> [-ConfigurationName <string>] [-AllowRedirection] [-Name <string[]>] [-Credential <pscredential>] [-Authentication <AuthenticationMechanism>] [-CertificateThumbprint <string>] [-ThrottleLimit <int>] [-State <SessionFilterState>] [-SessionOption <PSSessionOption>] [<CommonParameters>]

Get-PSSession -InstanceId <guid[]> -ContainerId <string[]> [-ConfigurationName <string>] [-State <SessionFilterState>] [<CommonParameters>]

Get-PSSession -ContainerId <string[]> [-ConfigurationName <string>] [-Name <string[]>] [-State <SessionFilterState>] [<CommonParameters>]

Get-PSSession -VMId <guid[]> [-ConfigurationName <string>] [-Name <string[]>] [-State <SessionFilterState>] [<CommonParameters>]

Get-PSSession -InstanceId <guid[]> -VMId <guid[]> [-ConfigurationName <string>] [-State <SessionFilterState>] [<CommonParameters>]

Get-PSSession -VMName <string[]> [-ConfigurationName <string>] [-Name <string[]>] [-State <SessionFilterState>] [<CommonParameters>]

Get-PSSession -InstanceId <guid[]> -VMName <string[]> [-ConfigurationName <string>] [-State <SessionFilterState>] [<CommonParameters>]

Get-PSSession [-InstanceId <guid[]>] [<CommonParameters>]

Get-PSSession [-Id] <int[]> [<CommonParameters>]
","ReadOnly",,"Get","PSSession","System.Management.Automation.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-PSSession","Cmdlet","Microsoft.PowerShell.Core","7.1.3.0","Public","Microsoft.PowerShell.Core",,"OwnedByCommand","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2097016",,,"RandomNumberParameterSet","
Get-Random [[-Maximum] <Object>] [-SetSeed <int>] [-Minimum <Object>] [-Count <int>] [<CommonParameters>]

Get-Random [-InputObject] <Object[]> [-SetSeed <int>] [-Count <int>] [<CommonParameters>]

Get-Random [-InputObject] <Object[]> -Shuffle [-SetSeed <int>] [<CommonParameters>]
","ReadOnly",,"Get","Random","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Random","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096616",,,"NameParameterSet","
Get-Runspace [[-Name] <string[]>] [<CommonParameters>]

Get-Runspace [-Id] <int[]> [<CommonParameters>]

Get-Runspace [-InstanceId] <guid[]> [<CommonParameters>]
","ReadOnly",,"Get","Runspace","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Runspace","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkId=2097015",,,"RunspaceNameParameterSet","
Get-RunspaceDebug [[-RunspaceName] <string[]>] [<CommonParameters>]

Get-RunspaceDebug [-Runspace] <runspace[]> [<CommonParameters>]

Get-RunspaceDebug [-RunspaceId] <int[]> [<CommonParameters>]

Get-RunspaceDebug [-RunspaceInstanceId] <guid[]> [<CommonParameters>]

Get-RunspaceDebug [[-ProcessName] <string>] [[-AppDomainName] <string[]>] [<CommonParameters>]
","ReadOnly",,"Get","RunspaceDebug","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-RunspaceDebug","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,"__AllParameterSets","Get-ScriptAnalyzerRule
","ReadOnly",,"Get","ScriptAnalyzerRule",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-ScriptAnalyzerRule","Cmdlet","PSScriptAnalyzer","1.19.1","Public","PSScriptAnalyzer","PSScriptAnalyzer","PowerShell",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkId=2096904",,,"Name","
Get-TimeZone [[-Name] <string[]>] [<CommonParameters>]

Get-TimeZone -Id <string[]> [<CommonParameters>]

Get-TimeZone -ListAvailable [<CommonParameters>]
","ReadOnly",,"Get","TimeZone","Microsoft.PowerShell.Commands.Management.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-TimeZone","Cmdlet","Microsoft.PowerShell.Management","7.0.0.0","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096707",,,,"
Get-TraceSource [[-Name] <string[]>] [<CommonParameters>]
","ReadOnly",,"Get","TraceSource","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-TraceSource","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2097018",,,,"
Get-TypeData [[-TypeName] <string[]>] [<CommonParameters>]
","ReadOnly",,"Get","TypeData","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-TypeData","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096613",,,,"
Get-UICulture [<CommonParameters>]
","ReadOnly",,"Get","UICulture","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-UICulture","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2097028",,,"AsString","
Get-Unique [-InputObject <psobject>] [-AsString] [<CommonParameters>]

Get-Unique [-InputObject <psobject>] [-OnType] [<CommonParameters>]
","ReadOnly",,"Get","Unique","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Unique","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?linkid=834862",,,"Timespan","
Get-Uptime [<CommonParameters>]

Get-Uptime [-Since] [<CommonParameters>]
","ReadOnly",,"Get","Uptime","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Uptime","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096711",,,,"
Get-Variable [[-Name] <string[]>] [-ValueOnly] [-Include <string[]>] [-Exclude <string[]>] [-Scope <string>] [<CommonParameters>]
","ReadOnly",,"Get","Variable","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Variable","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2097026",,,,"
Get-Verb [[-Verb] <string[]>] [[-Group] <string[]>] [<CommonParameters>]
","ReadOnly",,"Get","Verb","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Get-Verb","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096619",,,,"
Group-Object [[-Property] <Object[]>] [-NoElement] [-AsHashTable] [-AsString] [-InputObject <psobject>] [-Culture <string>] [-CaseSensitive] [<CommonParameters>]
","ReadOnly",,"Group","Object","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Group-Object","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2097125",,,"ByPath","
Import-Alias [-Path] <string> [-Scope <string>] [-PassThru] [-Force] [-WhatIf] [-Confirm] [<CommonParameters>]

Import-Alias -LiteralPath <string> [-Scope <string>] [-PassThru] [-Force] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"Import","Alias","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Import-Alias","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096618",,,"ByPath","
Import-Clixml [-Path] <string[]> [-IncludeTotalCount] [-Skip <ulong>] [-First <ulong>] [<CommonParameters>]

Import-Clixml -LiteralPath <string[]> [-IncludeTotalCount] [-Skip <ulong>] [-First <ulong>] [<CommonParameters>]
","ReadOnly",,"Import","Clixml","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Import-Clixml","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2097020",,,"DelimiterPath","
Import-Csv [-Path] <string[]> [[-Delimiter] <char>] [-Header <string[]>] [-Encoding <Encoding>] [<CommonParameters>]

Import-Csv [[-Delimiter] <char>] -LiteralPath <string[]> [-Header <string[]>] [-Encoding <Encoding>] [<CommonParameters>]

Import-Csv [-Path] <string[]> -UseCulture [-Header <string[]>] [-Encoding <Encoding>] [<CommonParameters>]

Import-Csv -LiteralPath <string[]> -UseCulture [-Header <string[]>] [-Encoding <Encoding>] [<CommonParameters>]
","ReadOnly",,"Import","Csv","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Import-Csv","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096710",,,,"
Import-LocalizedData [[-BindingVariable] <string>] [[-UICulture] <string>] [-BaseDirectory <string>] [-FileName <string>] [-SupportedCommand <string[]>] [<CommonParameters>]
","ReadOnly",,"Import","LocalizedData","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Import-LocalizedData","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096585",,,"Name","
Import-Module [-Name] <string[]> [-Global] [-Prefix <string>] [-Function <string[]>] [-Cmdlet <string[]>] [-Variable <string[]>] [-Alias <string[]>] [-Force] [-SkipEditionCheck] [-PassThru] [-AsCustomObject] [-MinimumVersion <version>] [-MaximumVersion <string>] [-RequiredVersion <version>] [-ArgumentList <Object[]>] [-DisableNameChecking] [-NoClobber] [-Scope <string>] [<CommonParameters>]

Import-Module [-Name] <string[]> -CimSession <CimSession> [-Global] [-Prefix <string>] [-Function <string[]>] [-Cmdlet <string[]>] [-Variable <string[]>] [-Alias <string[]>] [-Force] [-SkipEditionCheck] [-PassThru] [-AsCustomObject] [-MinimumVersion <version>] [-MaximumVersion <string>] [-RequiredVersion <version>] [-ArgumentList <Object[]>] [-DisableNameChecking] [-NoClobber] [-Scope <string>] [-CimResourceUri <uri>] [-CimNamespace <string>] [<CommonParameters>]

Import-Module [-Name] <string[]> -PSSession <PSSession> [-Global] [-Prefix <string>] [-Function <string[]>] [-Cmdlet <string[]>] [-Variable <string[]>] [-Alias <string[]>] [-Force] [-SkipEditionCheck] [-PassThru] [-AsCustomObject] [-MinimumVersion <version>] [-MaximumVersion <string>] [-RequiredVersion <version>] [-ArgumentList <Object[]>] [-DisableNameChecking] [-NoClobber] [-Scope <string>] [<CommonParameters>]

Import-Module [-Name] <string[]> -UseWindowsPowerShell [-Global] [-Prefix <string>] [-Function <string[]>] [-Cmdlet <string[]>] [-Variable <string[]>] [-Alias <string[]>] [-Force] [-PassThru] [-AsCustomObject] [-MinimumVersion <version>] [-MaximumVersion <string>] [-RequiredVersion <version>] [-ArgumentList <Object[]>] [-DisableNameChecking] [-NoClobber] [-Scope <string>] [<CommonParameters>]

Import-Module [-FullyQualifiedName] <ModuleSpecification[]> [-Global] [-Prefix <string>] [-Function <string[]>] [-Cmdlet <string[]>] [-Variable <string[]>] [-Alias <string[]>] [-Force] [-SkipEditionCheck] [-PassThru] [-AsCustomObject] [-ArgumentList <Object[]>] [-DisableNameChecking] [-NoClobber] [-Scope <string>] [<CommonParameters>]

Import-Module [-FullyQualifiedName] <ModuleSpecification[]> -PSSession <PSSession> [-Global] [-Prefix <string>] [-Function <string[]>] [-Cmdlet <string[]>] [-Variable <string[]>] [-Alias <string[]>] [-Force] [-SkipEditionCheck] [-PassThru] [-AsCustomObject] [-ArgumentList <Object[]>] [-DisableNameChecking] [-NoClobber] [-Scope <string>] [<CommonParameters>]

Import-Module [-FullyQualifiedName] <ModuleSpecification[]> -UseWindowsPowerShell [-Global] [-Prefix <string>] [-Function <string[]>] [-Cmdlet <string[]>] [-Variable <string[]>] [-Alias <string[]>] [-Force] [-PassThru] [-AsCustomObject] [-ArgumentList <Object[]>] [-DisableNameChecking] [-NoClobber] [-Scope <string>] [<CommonParameters>]

Import-Module [-Assembly] <Assembly[]> [-Global] [-Prefix <string>] [-Function <string[]>] [-Cmdlet <string[]>] [-Variable <string[]>] [-Alias <string[]>] [-Force] [-SkipEditionCheck] [-PassThru] [-AsCustomObject] [-ArgumentList <Object[]>] [-DisableNameChecking] [-NoClobber] [-Scope <string>] [<CommonParameters>]

Import-Module [-ModuleInfo] <psmoduleinfo[]> [-Global] [-Prefix <string>] [-Function <string[]>] [-Cmdlet <string[]>] [-Variable <string[]>] [-Alias <string[]>] [-Force] [-SkipEditionCheck] [-PassThru] [-AsCustomObject] [-ArgumentList <Object[]>] [-DisableNameChecking] [-NoClobber] [-Scope <string>] [<CommonParameters>]
","ReadOnly",,"Import","Module","System.Management.Automation.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Import-Module","Cmdlet","Microsoft.PowerShell.Core","7.1.3.0","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,"__AllParameterSets","Import-PackageProvider
","ReadOnly",,"Import","PackageProvider",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Import-PackageProvider","Cmdlet","PackageManagement","1.4.7","Public","PackageManagement","PackageManagement","PowerShell",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=623621",,,"ByPath","
Import-PowerShellDataFile [-Path] <string[]> [<CommonParameters>]

Import-PowerShellDataFile [-LiteralPath] <string[]> [<CommonParameters>]
","ReadOnly",,"Import","PowerShellDataFile","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Import-PowerShellDataFile","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096712",,,,"
Import-PSSession [-Session] <PSSession> [[-CommandName] <string[]>] [[-FormatTypeName] <string[]>] [-Prefix <string>] [-DisableNameChecking] [-AllowClobber] [-ArgumentList <Object[]>] [-CommandType <CommandTypes>] [-Module <string[]>] [-FullyQualifiedModule <ModuleSpecification[]>] [-Certificate <X509Certificate2>] [<CommonParameters>]
","ReadOnly",,"Import","PSSession","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Import-PSSession","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,"__AllParameterSets","Install-Package
","ReadOnly",,"Install","Package",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Install-Package","Cmdlet","PackageManagement","1.4.7","Public","PackageManagement","PackageManagement","PowerShell",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,"__AllParameterSets","Install-PackageProvider
","ReadOnly",,"Install","PackageProvider",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Install-PackageProvider","Cmdlet","PackageManagement","1.4.7","Public","PackageManagement","PackageManagement","PowerShell",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096789",,,"InProcess","
Invoke-Command [-ScriptBlock] <scriptblock> [-NoNewScope] [-InputObject <psobject>] [-ArgumentList <Object[]>] [<CommonParameters>]

Invoke-Command [[-Session] <PSSession[]>] [-FilePath] <string> [-ThrottleLimit <int>] [-AsJob] [-HideComputerName] [-JobName <string>] [-RemoteDebug] [-InputObject <psobject>] [-ArgumentList <Object[]>] [<CommonParameters>]

Invoke-Command [[-Session] <PSSession[]>] [-ScriptBlock] <scriptblock> [-ThrottleLimit <int>] [-AsJob] [-HideComputerName] [-JobName <string>] [-RemoteDebug] [-InputObject <psobject>] [-ArgumentList <Object[]>] [<CommonParameters>]

Invoke-Command [[-ComputerName] <string[]>] [-FilePath] <string> [-Credential <pscredential>] [-Port <int>] [-UseSSL] [-ConfigurationName <string>] [-ApplicationName <string>] [-ThrottleLimit <int>] [-AsJob] [-InDisconnectedSession] [-SessionName <string[]>] [-HideComputerName] [-JobName <string>] [-SessionOption <PSSessionOption>] [-Authentication <AuthenticationMechanism>] [-EnableNetworkAccess] [-RemoteDebug] [-InputObject <psobject>] [-ArgumentList <Object[]>] [<CommonParameters>]

Invoke-Command [[-ComputerName] <string[]>] [-ScriptBlock] <scriptblock> [-Credential <pscredential>] [-Port <int>] [-UseSSL] [-ConfigurationName <string>] [-ApplicationName <string>] [-ThrottleLimit <int>] [-AsJob] [-InDisconnectedSession] [-SessionName <string[]>] [-HideComputerName] [-JobName <string>] [-SessionOption <PSSessionOption>] [-Authentication <AuthenticationMechanism>] [-EnableNetworkAccess] [-RemoteDebug] [-InputObject <psobject>] [-ArgumentList <Object[]>] [-CertificateThumbprint <string>] [<CommonParameters>]

Invoke-Command [[-ConnectionUri] <uri[]>] [-ScriptBlock] <scriptblock> [-Credential <pscredential>] [-ConfigurationName <string>] [-ThrottleLimit <int>] [-AsJob] [-InDisconnectedSession] [-HideComputerName] [-JobName <string>] [-AllowRedirection] [-SessionOption <PSSessionOption>] [-Authentication <AuthenticationMechanism>] [-EnableNetworkAccess] [-RemoteDebug] [-InputObject <psobject>] [-ArgumentList <Object[]>] [-CertificateThumbprint <string>] [<CommonParameters>]

Invoke-Command [[-ConnectionUri] <uri[]>] [-FilePath] <string> [-Credential <pscredential>] [-ConfigurationName <string>] [-ThrottleLimit <int>] [-AsJob] [-InDisconnectedSession] [-HideComputerName] [-JobName <string>] [-AllowRedirection] [-SessionOption <PSSessionOption>] [-Authentication <AuthenticationMechanism>] [-EnableNetworkAccess] [-RemoteDebug] [-InputObject <psobject>] [-ArgumentList <Object[]>] [<CommonParameters>]

Invoke-Command [-VMId] <guid[]> [-ScriptBlock] <scriptblock> -Credential <pscredential> [-ConfigurationName <string>] [-ThrottleLimit <int>] [-AsJob] [-HideComputerName] [-RemoteDebug] [-InputObject <psobject>] [-ArgumentList <Object[]>] [<CommonParameters>]

Invoke-Command [-ScriptBlock] <scriptblock> -Credential <pscredential> -VMName <string[]> [-ConfigurationName <string>] [-ThrottleLimit <int>] [-AsJob] [-HideComputerName] [-RemoteDebug] [-InputObject <psobject>] [-ArgumentList <Object[]>] [<CommonParameters>]

Invoke-Command [-VMId] <guid[]> [-FilePath] <string> -Credential <pscredential> [-ConfigurationName <string>] [-ThrottleLimit <int>] [-AsJob] [-HideComputerName] [-RemoteDebug] [-InputObject <psobject>] [-ArgumentList <Object[]>] [<CommonParameters>]

Invoke-Command [-FilePath] <string> -Credential <pscredential> -VMName <string[]> [-ConfigurationName <string>] [-ThrottleLimit <int>] [-AsJob] [-HideComputerName] [-RemoteDebug] [-InputObject <psobject>] [-ArgumentList <Object[]>] [<CommonParameters>]

Invoke-Command [-ScriptBlock] <scriptblock> -HostName <string[]> [-Port <int>] [-AsJob] [-HideComputerName] [-JobName <string>] [-UserName <string>] [-KeyFilePath <string>] [-SSHTransport] [-RemoteDebug] [-InputObject <psobject>] [-ArgumentList <Object[]>] [-Subsystem <string>] [<CommonParameters>]

Invoke-Command [-ScriptBlock] <scriptblock> -ContainerId <string[]> [-ConfigurationName <string>] [-ThrottleLimit <int>] [-AsJob] [-HideComputerName] [-JobName <string>] [-RunAsAdministrator] [-RemoteDebug] [-InputObject <psobject>] [-ArgumentList <Object[]>] [<CommonParameters>]

Invoke-Command [-FilePath] <string> -ContainerId <string[]> [-ConfigurationName <string>] [-ThrottleLimit <int>] [-AsJob] [-HideComputerName] [-JobName <string>] [-RunAsAdministrator] [-RemoteDebug] [-InputObject <psobject>] [-ArgumentList <Object[]>] [<CommonParameters>]

Invoke-Command [-ScriptBlock] <scriptblock> -SSHConnection <hashtable[]> [-AsJob] [-HideComputerName] [-JobName <string>] [-RemoteDebug] [-InputObject <psobject>] [-ArgumentList <Object[]>] [<CommonParameters>]

Invoke-Command -FilePath <string> -HostName <string[]> [-AsJob] [-HideComputerName] [-UserName <string>] [-KeyFilePath <string>] [-SSHTransport] [-RemoteDebug] [-InputObject <psobject>] [-ArgumentList <Object[]>] [<CommonParameters>]

Invoke-Command -FilePath <string> -SSHConnection <hashtable[]> [-AsJob] [-HideComputerName] [-RemoteDebug] [-InputObject <psobject>] [-ArgumentList <Object[]>] [<CommonParameters>]
","ReadOnly",,"Invoke","Command","System.Management.Automation.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Invoke-Command","Cmdlet","Microsoft.PowerShell.Core","7.1.3.0","Public","Microsoft.PowerShell.Core",,"OwnedByCommand","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2097030",,,,"
Invoke-Expression [-Command] <string> [<CommonParameters>]
","ReadOnly",,"Invoke","Expression","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Invoke-Expression","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,"__AllParameterSets","Invoke-Formatter
","ReadOnly",,"Invoke","Formatter",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Invoke-Formatter","Cmdlet","PSScriptAnalyzer","1.19.1","Public","PSScriptAnalyzer","PSScriptAnalyzer","PowerShell",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096586",,,,"
Invoke-History [[-Id] <string>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"Invoke","History","System.Management.Automation.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Invoke-History","Cmdlet","Microsoft.PowerShell.Core","7.1.3.0","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096590",,,"Path","
Invoke-Item [-Path] <string[]> [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Credential <pscredential>] [-WhatIf] [-Confirm] [<CommonParameters>]

Invoke-Item -LiteralPath <string[]> [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Credential <pscredential>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"Invoke","Item","Microsoft.PowerShell.Commands.Management.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Invoke-Item","Cmdlet","Microsoft.PowerShell.Management","7.0.0.0","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096706",,,"StandardMethod","
Invoke-RestMethod [-Uri] <uri> [-Method <WebRequestMethod>] [-FollowRelLink] [-MaximumFollowRelLink <int>] [-ResponseHeadersVariable <string>] [-StatusCodeVariable <string>] [-UseBasicParsing] [-WebSession <WebRequestSession>] [-SessionVariable <string>] [-AllowUnencryptedAuthentication] [-Authentication <WebAuthenticationType>] [-Credential <pscredential>] [-UseDefaultCredentials] [-CertificateThumbprint <string>] [-Certificate <X509Certificate>] [-SkipCertificateCheck] [-SslProtocol <WebSslProtocol>] [-Token <securestring>] [-UserAgent <string>] [-DisableKeepAlive] [-TimeoutSec <int>] [-Headers <IDictionary>] [-MaximumRedirection <int>] [-MaximumRetryCount <int>] [-RetryIntervalSec <int>] [-Proxy <uri>] [-ProxyCredential <pscredential>] [-ProxyUseDefaultCredentials] [-Body <Object>] [-Form <IDictionary>] [-ContentType <string>] [-TransferEncoding <string>] [-InFile <string>] [-OutFile <string>] [-PassThru] [-Resume] [-SkipHttpErrorCheck] [-PreserveAuthorizationOnRedirect] [-SkipHeaderValidation] [<CommonParameters>]

Invoke-RestMethod [-Uri] <uri> -NoProxy [-Method <WebRequestMethod>] [-FollowRelLink] [-MaximumFollowRelLink <int>] [-ResponseHeadersVariable <string>] [-StatusCodeVariable <string>] [-UseBasicParsing] [-WebSession <WebRequestSession>] [-SessionVariable <string>] [-AllowUnencryptedAuthentication] [-Authentication <WebAuthenticationType>] [-Credential <pscredential>] [-UseDefaultCredentials] [-CertificateThumbprint <string>] [-Certificate <X509Certificate>] [-SkipCertificateCheck] [-SslProtocol <WebSslProtocol>] [-Token <securestring>] [-UserAgent <string>] [-DisableKeepAlive] [-TimeoutSec <int>] [-Headers <IDictionary>] [-MaximumRedirection <int>] [-MaximumRetryCount <int>] [-RetryIntervalSec <int>] [-Body <Object>] [-Form <IDictionary>] [-ContentType <string>] [-TransferEncoding <string>] [-InFile <string>] [-OutFile <string>] [-PassThru] [-Resume] [-SkipHttpErrorCheck] [-PreserveAuthorizationOnRedirect] [-SkipHeaderValidation] [<CommonParameters>]

Invoke-RestMethod [-Uri] <uri> -CustomMethod <string> [-FollowRelLink] [-MaximumFollowRelLink <int>] [-ResponseHeadersVariable <string>] [-StatusCodeVariable <string>] [-UseBasicParsing] [-WebSession <WebRequestSession>] [-SessionVariable <string>] [-AllowUnencryptedAuthentication] [-Authentication <WebAuthenticationType>] [-Credential <pscredential>] [-UseDefaultCredentials] [-CertificateThumbprint <string>] [-Certificate <X509Certificate>] [-SkipCertificateCheck] [-SslProtocol <WebSslProtocol>] [-Token <securestring>] [-UserAgent <string>] [-DisableKeepAlive] [-TimeoutSec <int>] [-Headers <IDictionary>] [-MaximumRedirection <int>] [-MaximumRetryCount <int>] [-RetryIntervalSec <int>] [-Proxy <uri>] [-ProxyCredential <pscredential>] [-ProxyUseDefaultCredentials] [-Body <Object>] [-Form <IDictionary>] [-ContentType <string>] [-TransferEncoding <string>] [-InFile <string>] [-OutFile <string>] [-PassThru] [-Resume] [-SkipHttpErrorCheck] [-PreserveAuthorizationOnRedirect] [-SkipHeaderValidation] [<CommonParameters>]

Invoke-RestMethod [-Uri] <uri> -CustomMethod <string> -NoProxy [-FollowRelLink] [-MaximumFollowRelLink <int>] [-ResponseHeadersVariable <string>] [-StatusCodeVariable <string>] [-UseBasicParsing] [-WebSession <WebRequestSession>] [-SessionVariable <string>] [-AllowUnencryptedAuthentication] [-Authentication <WebAuthenticationType>] [-Credential <pscredential>] [-UseDefaultCredentials] [-CertificateThumbprint <string>] [-Certificate <X509Certificate>] [-SkipCertificateCheck] [-SslProtocol <WebSslProtocol>] [-Token <securestring>] [-UserAgent <string>] [-DisableKeepAlive] [-TimeoutSec <int>] [-Headers <IDictionary>] [-MaximumRedirection <int>] [-MaximumRetryCount <int>] [-RetryIntervalSec <int>] [-Body <Object>] [-Form <IDictionary>] [-ContentType <string>] [-TransferEncoding <string>] [-InFile <string>] [-OutFile <string>] [-PassThru] [-Resume] [-SkipHttpErrorCheck] [-PreserveAuthorizationOnRedirect] [-SkipHeaderValidation] [<CommonParameters>]
","ReadOnly",,"Invoke","RestMethod","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Invoke-RestMethod","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,"__AllParameterSets","Invoke-ScriptAnalyzer
","ReadOnly",,"Invoke","ScriptAnalyzer",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Invoke-ScriptAnalyzer","Cmdlet","PSScriptAnalyzer","1.19.1","Public","PSScriptAnalyzer","PSScriptAnalyzer","PowerShell",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2097126",,,"StandardMethod","
Invoke-WebRequest [-Uri] <uri> [-UseBasicParsing] [-WebSession <WebRequestSession>] [-SessionVariable <string>] [-AllowUnencryptedAuthentication] [-Authentication <WebAuthenticationType>] [-Credential <pscredential>] [-UseDefaultCredentials] [-CertificateThumbprint <string>] [-Certificate <X509Certificate>] [-SkipCertificateCheck] [-SslProtocol <WebSslProtocol>] [-Token <securestring>] [-UserAgent <string>] [-DisableKeepAlive] [-TimeoutSec <int>] [-Headers <IDictionary>] [-MaximumRedirection <int>] [-MaximumRetryCount <int>] [-RetryIntervalSec <int>] [-Method <WebRequestMethod>] [-Proxy <uri>] [-ProxyCredential <pscredential>] [-ProxyUseDefaultCredentials] [-Body <Object>] [-Form <IDictionary>] [-ContentType <string>] [-TransferEncoding <string>] [-InFile <string>] [-OutFile <string>] [-PassThru] [-Resume] [-SkipHttpErrorCheck] [-PreserveAuthorizationOnRedirect] [-SkipHeaderValidation] [<CommonParameters>]

Invoke-WebRequest [-Uri] <uri> -NoProxy [-UseBasicParsing] [-WebSession <WebRequestSession>] [-SessionVariable <string>] [-AllowUnencryptedAuthentication] [-Authentication <WebAuthenticationType>] [-Credential <pscredential>] [-UseDefaultCredentials] [-CertificateThumbprint <string>] [-Certificate <X509Certificate>] [-SkipCertificateCheck] [-SslProtocol <WebSslProtocol>] [-Token <securestring>] [-UserAgent <string>] [-DisableKeepAlive] [-TimeoutSec <int>] [-Headers <IDictionary>] [-MaximumRedirection <int>] [-MaximumRetryCount <int>] [-RetryIntervalSec <int>] [-Method <WebRequestMethod>] [-Body <Object>] [-Form <IDictionary>] [-ContentType <string>] [-TransferEncoding <string>] [-InFile <string>] [-OutFile <string>] [-PassThru] [-Resume] [-SkipHttpErrorCheck] [-PreserveAuthorizationOnRedirect] [-SkipHeaderValidation] [<CommonParameters>]

Invoke-WebRequest [-Uri] <uri> -CustomMethod <string> -NoProxy [-UseBasicParsing] [-WebSession <WebRequestSession>] [-SessionVariable <string>] [-AllowUnencryptedAuthentication] [-Authentication <WebAuthenticationType>] [-Credential <pscredential>] [-UseDefaultCredentials] [-CertificateThumbprint <string>] [-Certificate <X509Certificate>] [-SkipCertificateCheck] [-SslProtocol <WebSslProtocol>] [-Token <securestring>] [-UserAgent <string>] [-DisableKeepAlive] [-TimeoutSec <int>] [-Headers <IDictionary>] [-MaximumRedirection <int>] [-MaximumRetryCount <int>] [-RetryIntervalSec <int>] [-Body <Object>] [-Form <IDictionary>] [-ContentType <string>] [-TransferEncoding <string>] [-InFile <string>] [-OutFile <string>] [-PassThru] [-Resume] [-SkipHttpErrorCheck] [-PreserveAuthorizationOnRedirect] [-SkipHeaderValidation] [<CommonParameters>]

Invoke-WebRequest [-Uri] <uri> -CustomMethod <string> [-UseBasicParsing] [-WebSession <WebRequestSession>] [-SessionVariable <string>] [-AllowUnencryptedAuthentication] [-Authentication <WebAuthenticationType>] [-Credential <pscredential>] [-UseDefaultCredentials] [-CertificateThumbprint <string>] [-Certificate <X509Certificate>] [-SkipCertificateCheck] [-SslProtocol <WebSslProtocol>] [-Token <securestring>] [-UserAgent <string>] [-DisableKeepAlive] [-TimeoutSec <int>] [-Headers <IDictionary>] [-MaximumRedirection <int>] [-MaximumRetryCount <int>] [-RetryIntervalSec <int>] [-Proxy <uri>] [-ProxyCredential <pscredential>] [-ProxyUseDefaultCredentials] [-Body <Object>] [-Form <IDictionary>] [-ContentType <string>] [-TransferEncoding <string>] [-InFile <string>] [-OutFile <string>] [-PassThru] [-Resume] [-SkipHttpErrorCheck] [-PreserveAuthorizationOnRedirect] [-SkipHeaderValidation] [<CommonParameters>]
","ReadOnly",,"Invoke","WebRequest","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Invoke-WebRequest","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096811",,,,"
Join-Path [-Path] <string[]> [-ChildPath] <string> [[-AdditionalChildPath] <string[]>] [-Resolve] [-Credential <pscredential>] [<CommonParameters>]
","ReadOnly",,"Join","Path","Microsoft.PowerShell.Commands.Management.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Join-Path","Cmdlet","Microsoft.PowerShell.Management","7.0.0.0","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://docs.microsoft.com/powershell/module/microsoft.powershell.utility/join-string?view=powershell-7.1&WT.mc_id=ps-gethelp",,,"default","
Join-String [[-Property] <pspropertyexpression>] [[-Separator] <string>] [-OutputPrefix <string>] [-OutputSuffix <string>] [-UseCulture] [-InputObject <psobject[]>] [<CommonParameters>]

Join-String [[-Property] <pspropertyexpression>] [[-Separator] <string>] [-OutputPrefix <string>] [-OutputSuffix <string>] [-SingleQuote] [-UseCulture] [-InputObject <psobject[]>] [<CommonParameters>]

Join-String [[-Property] <pspropertyexpression>] [[-Separator] <string>] [-OutputPrefix <string>] [-OutputSuffix <string>] [-DoubleQuote] [-UseCulture] [-InputObject <psobject[]>] [<CommonParameters>]

Join-String [[-Property] <pspropertyexpression>] [[-Separator] <string>] [-OutputPrefix <string>] [-OutputSuffix <string>] [-FormatString <string>] [-UseCulture] [-InputObject <psobject[]>] [<CommonParameters>]
","ReadOnly",,"Join","String","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Join-String","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2097029",,,,"
Measure-Command [-Expression] <scriptblock> [-InputObject <psobject>] [<CommonParameters>]
","ReadOnly",,"Measure","Command","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Measure-Command","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096617",,,"GenericMeasure","
Measure-Object [[-Property] <pspropertyexpression[]>] [-InputObject <psobject>] [-StandardDeviation] [-Sum] [-AllStats] [-Average] [-Maximum] [-Minimum] [<CommonParameters>]

Measure-Object [[-Property] <pspropertyexpression[]>] [-InputObject <psobject>] [-Line] [-Word] [-Character] [-IgnoreWhiteSpace] [<CommonParameters>]
","ReadOnly",,"Measure","Object","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Measure-Object","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096591",,,"Path","
Move-Item [-Path] <string[]> [[-Destination] <string>] [-Force] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-PassThru] [-Credential <pscredential>] [-WhatIf] [-Confirm] [<CommonParameters>]

Move-Item [[-Destination] <string>] -LiteralPath <string[]> [-Force] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-PassThru] [-Credential <pscredential>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"Move","Item","Microsoft.PowerShell.Commands.Management.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Move-Item","Cmdlet","Microsoft.PowerShell.Management","7.0.0.0","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096817",,,"Path","
Move-ItemProperty [-Path] <string[]> [-Destination] <string> [-Name] <string[]> [-PassThru] [-Force] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Credential <pscredential>] [-WhatIf] [-Confirm] [<CommonParameters>]

Move-ItemProperty [-Destination] <string> [-Name] <string[]> -LiteralPath <string[]> [-PassThru] [-Force] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Credential <pscredential>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"Move","ItemProperty","Microsoft.PowerShell.Commands.Management.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Move-ItemProperty","Cmdlet","Microsoft.PowerShell.Management","7.0.0.0","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2097022",,,,"
New-Alias [-Name] <string> [-Value] <string> [-Description <string>] [-Option <ScopedItemOptions>] [-PassThru] [-Scope <string>] [-Force] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"New","Alias","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-Alias","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096708",,,,"
New-Event [-SourceIdentifier] <string> [[-Sender] <psobject>] [[-EventArguments] <psobject[]>] [[-MessageData] <psobject>] [<CommonParameters>]
","ReadOnly",,"New","Event","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-Event","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkId=2097130",,,,"
New-Guid [<CommonParameters>]
","ReadOnly",,"New","Guid","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-Guid","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096592",,,"pathSet","
New-Item [-Path] <string[]> [-ItemType <string>] [-Value <Object>] [-Force] [-Credential <pscredential>] [-WhatIf] [-Confirm] [<CommonParameters>]

New-Item [[-Path] <string[]>] -Name <string> [-ItemType <string>] [-Value <Object>] [-Force] [-Credential <pscredential>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"New","Item","Microsoft.PowerShell.Commands.Management.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-Item","Cmdlet","Microsoft.PowerShell.Management","7.0.0.0","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096813",,,"Path","
New-ItemProperty [-Path] <string[]> [-Name] <string> [-PropertyType <string>] [-Value <Object>] [-Force] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Credential <pscredential>] [-WhatIf] [-Confirm] [<CommonParameters>]

New-ItemProperty [-Name] <string> -LiteralPath <string[]> [-PropertyType <string>] [-Value <Object>] [-Force] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Credential <pscredential>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"New","ItemProperty","Microsoft.PowerShell.Commands.Management.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-ItemProperty","Cmdlet","Microsoft.PowerShell.Management","7.0.0.0","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096698",,,"ScriptBlock","
New-Module [-ScriptBlock] <scriptblock> [-Function <string[]>] [-Cmdlet <string[]>] [-ReturnResult] [-AsCustomObject] [-ArgumentList <Object[]>] [<CommonParameters>]

New-Module [-Name] <string> [-ScriptBlock] <scriptblock> [-Function <string[]>] [-Cmdlet <string[]>] [-ReturnResult] [-AsCustomObject] [-ArgumentList <Object[]>] [<CommonParameters>]
","ReadOnly",,"New","Module","System.Management.Automation.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-Module","Cmdlet","Microsoft.PowerShell.Core","7.1.3.0","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096487",,,,"
New-ModuleManifest [-Path] <string> [-NestedModules <Object[]>] [-Guid <guid>] [-Author <string>] [-CompanyName <string>] [-Copyright <string>] [-RootModule <string>] [-ModuleVersion <version>] [-Description <string>] [-ProcessorArchitecture <ProcessorArchitecture>] [-PowerShellVersion <version>] [-ClrVersion <version>] [-DotNetFrameworkVersion <version>] [-PowerShellHostName <string>] [-PowerShellHostVersion <version>] [-RequiredModules <Object[]>] [-TypesToProcess <string[]>] [-FormatsToProcess <string[]>] [-ScriptsToProcess <string[]>] [-RequiredAssemblies <string[]>] [-FileList <string[]>] [-ModuleList <Object[]>] [-FunctionsToExport <string[]>] [-AliasesToExport <string[]>] [-VariablesToExport <string[]>] [-CmdletsToExport <string[]>] [-DscResourcesToExport <string[]>] [-CompatiblePSEditions <string[]>] [-PrivateData <Object>] [-Tags <string[]>] [-ProjectUri <uri>] [-LicenseUri <uri>] [-IconUri <uri>] [-ReleaseNotes <string>] [-Prerelease <string>] [-RequireLicenseAcceptance] [-ExternalModuleDependencies <string[]>] [-HelpInfoUri <string>] [-PassThru] [-DefaultCommandPrefix <string>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"New","ModuleManifest","System.Management.Automation.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-ModuleManifest","Cmdlet","Microsoft.PowerShell.Core","7.1.3.0","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096620",,,"Net","
New-Object [-TypeName] <string> [[-ArgumentList] <Object[]>] [-Property <IDictionary>] [<CommonParameters>]

New-Object [-Strict] [-Property <IDictionary>] [<CommonParameters>]
","ReadOnly",,"New","Object","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-Object","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096815",,,,"
New-PSDrive [-Name] <string> [-PSProvider] <string> [-Root] <string> [-Description <string>] [-Scope <string>] [-Credential <pscredential>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"New","PSDrive","Microsoft.PowerShell.Commands.Management.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-PSDrive","Cmdlet","Microsoft.PowerShell.Management","7.0.0.0","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkId=623708",,,,"
New-PSRoleCapabilityFile [-Path] <string> [-Guid <guid>] [-Author <string>] [-Description <string>] [-CompanyName <string>] [-Copyright <string>] [-ModulesToImport <Object[]>] [-VisibleAliases <string[]>] [-VisibleCmdlets <Object[]>] [-VisibleFunctions <Object[]>] [-VisibleExternalCommands <string[]>] [-VisibleProviders <string[]>] [-ScriptsToProcess <string[]>] [-AliasDefinitions <IDictionary[]>] [-FunctionDefinitions <IDictionary[]>] [-VariableDefinitions <Object>] [-EnvironmentVariables <IDictionary>] [-TypesToProcess <string[]>] [-FormatsToProcess <string[]>] [-AssembliesToLoad <string[]>] [<CommonParameters>]
","ReadOnly",,"New","PSRoleCapabilityFile","System.Management.Automation.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-PSRoleCapabilityFile","Cmdlet","Microsoft.PowerShell.Core","7.1.3.0","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096484",,,"ComputerName","
New-PSSession [[-ComputerName] <string[]>] [-Credential <pscredential>] [-Name <string[]>] [-EnableNetworkAccess] [-ConfigurationName <string>] [-Port <int>] [-UseSSL] [-ApplicationName <string>] [-ThrottleLimit <int>] [-SessionOption <PSSessionOption>] [-Authentication <AuthenticationMechanism>] [-CertificateThumbprint <string>] [<CommonParameters>]

New-PSSession [-ConnectionUri] <uri[]> [-Credential <pscredential>] [-Name <string[]>] [-EnableNetworkAccess] [-ConfigurationName <string>] [-ThrottleLimit <int>] [-AllowRedirection] [-SessionOption <PSSessionOption>] [-Authentication <AuthenticationMechanism>] [-CertificateThumbprint <string>] [<CommonParameters>]

New-PSSession [-VMId] <guid[]> -Credential <pscredential> [-Name <string[]>] [-ConfigurationName <string>] [-ThrottleLimit <int>] [<CommonParameters>]

New-PSSession -Credential <pscredential> -VMName <string[]> [-Name <string[]>] [-ConfigurationName <string>] [-ThrottleLimit <int>] [<CommonParameters>]

New-PSSession [[-Session] <PSSession[]>] [-Name <string[]>] [-EnableNetworkAccess] [-ThrottleLimit <int>] [<CommonParameters>]

New-PSSession -ContainerId <string[]> [-Name <string[]>] [-ConfigurationName <string>] [-RunAsAdministrator] [-ThrottleLimit <int>] [<CommonParameters>]

New-PSSession -UseWindowsPowerShell [-Name <string[]>] [<CommonParameters>]

New-PSSession [-HostName] <string[]> [-Name <string[]>] [-Port <int>] [-UserName <string>] [-KeyFilePath <string>] [-SSHTransport] [-Subsystem <string>] [<CommonParameters>]

New-PSSession -SSHConnection <hashtable[]> [-Name <string[]>] [<CommonParameters>]
","ReadOnly",,"New","PSSession","System.Management.Automation.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-PSSession","Cmdlet","Microsoft.PowerShell.Core","7.1.3.0","Public","Microsoft.PowerShell.Core",,"OwnedByCommand","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096488",,,,"
New-PSSessionOption [-SkipCACheck] [-SkipCNCheck] [<CommonParameters>]
","ReadOnly",,"New","PSSessionOption","System.Management.Automation.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-PSSessionOption","Cmdlet","Microsoft.PowerShell.Core","7.1.3.0","Public","Microsoft.PowerShell.Core",,"None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=210608",,,,"
New-PSTransportOption [-MaxIdleTimeoutSec <int>] [-ProcessIdleTimeoutSec <int>] [-MaxSessions <int>] [-MaxConcurrentCommandsPerSession <int>] [-MaxSessionsPerUser <int>] [-MaxMemoryPerSessionMB <int>] [-MaxProcessesPerSession <int>] [-MaxConcurrentUsers <int>] [-IdleTimeoutSec <int>] [-OutputBufferingMode <OutputBufferingMode>] [<CommonParameters>]
","ReadOnly",,"New","PSTransportOption","System.Management.Automation.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-PSTransportOption","Cmdlet","Microsoft.PowerShell.Core","7.1.3.0","Public","Microsoft.PowerShell.Core",,"None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkId=2097032",,,,"
New-TemporaryFile [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"New","TemporaryFile","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-TemporaryFile","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096709",,,"Date","
New-TimeSpan [[-Start] <datetime>] [[-End] <datetime>] [<CommonParameters>]

New-TimeSpan [-Days <int>] [-Hours <int>] [-Minutes <int>] [-Seconds <int>] [<CommonParameters>]
","ReadOnly",,"New","TimeSpan","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-TimeSpan","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2097121",,,,"
New-Variable [-Name] <string> [[-Value] <Object>] [-Description <string>] [-Option <ScopedItemOptions>] [-Visibility <SessionStateEntryVisibility>] [-Force] [-PassThru] [-Scope <string>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"New","Variable","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-Variable","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,"
New-VSCodeHtmlContentView [-Title] <string> [[-ShowInColumn] <ViewColumn>] [<CommonParameters>]
","ReadOnly",,"New","VSCodeHtmlContentView","Microsoft.PowerShell.EditorServices.VSCode.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","New-VSCodeHtmlContentView","Cmdlet","PowerShellEditorServices.VSCode","0.2.0","Public","PowerShellEditorServices.VSCode","PowerShellEditorServices.VSCode","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096486",,,,"
Out-Default [-Transcript] [-InputObject <psobject>] [<CommonParameters>]
","ReadOnly",,"Out","Default","System.Management.Automation.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Out-Default","Cmdlet","Microsoft.PowerShell.Core","7.1.3.0","Public","Microsoft.PowerShell.Core",,"None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096621",,,"ByPath","
Out-File [-FilePath] <string> [[-Encoding] <Encoding>] [-Append] [-Force] [-NoClobber] [-Width <int>] [-NoNewline] [-InputObject <psobject>] [-WhatIf] [-Confirm] [<CommonParameters>]

Out-File [[-Encoding] <Encoding>] -LiteralPath <string> [-Append] [-Force] [-NoClobber] [-Width <int>] [-NoNewline] [-InputObject <psobject>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"Out","File","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Out-File","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096863",,,,"
Out-Host [-Paging] [-InputObject <psobject>] [<CommonParameters>]
","ReadOnly",,"Out","Host","System.Management.Automation.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Out-Host","Cmdlet","Microsoft.PowerShell.Core","7.1.3.0","Public","Microsoft.PowerShell.Core",,"None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096792",,,,"
Out-Null [-InputObject <psobject>] [<CommonParameters>]
","ReadOnly",,"Out","Null","System.Management.Automation.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Out-Null","Cmdlet","Microsoft.PowerShell.Core","7.1.3.0","Public","Microsoft.PowerShell.Core",,"None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2097024",,,"NoNewLineFormatting","
Out-String [-Width <int>] [-NoNewline] [-InputObject <psobject>] [<CommonParameters>]

Out-String [-Stream] [-Width <int>] [-InputObject <psobject>] [<CommonParameters>]
","ReadOnly",,"Out","String","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Out-String","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096907",,,,"
Pop-Location [-PassThru] [-StackName <string>] [<CommonParameters>]
","ReadOnly",,"Pop","Location","Microsoft.PowerShell.Commands.Management.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Pop-Location","Cmdlet","Microsoft.PowerShell.Management","7.0.0.0","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,"__AllParameterSets","Protect-CmsMessage
","ReadOnly",,"Protect","CmsMessage",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Protect-CmsMessage","Cmdlet","Microsoft.PowerShell.Security","7.0.0.0","Public","Microsoft.PowerShell.Security","Microsoft.PowerShell.Security","PowerShell",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2097105",,,"Path","
Push-Location [[-Path] <string>] [-PassThru] [-StackName <string>] [<CommonParameters>]

Push-Location [-LiteralPath <string>] [-PassThru] [-StackName <string>] [<CommonParameters>]
","ReadOnly",,"Push","Location","Microsoft.PowerShell.Commands.Management.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Push-Location","Cmdlet","Microsoft.PowerShell.Management","7.0.0.0","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096610",,,"AsString","
Read-Host [[-Prompt] <Object>] [-MaskInput] [<CommonParameters>]

Read-Host [[-Prompt] <Object>] [-AsSecureString] [<CommonParameters>]
","ReadOnly",,"Read","Host","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Read-Host","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096965",,,"Location","
Receive-Job [-Job] <Job[]> [[-Location] <string[]>] [-Keep] [-NoRecurse] [-Force] [-Wait] [-AutoRemoveJob] [-WriteEvents] [-WriteJobInResults] [<CommonParameters>]

Receive-Job [-Job] <Job[]> [[-Session] <PSSession[]>] [-Keep] [-NoRecurse] [-Force] [-Wait] [-AutoRemoveJob] [-WriteEvents] [-WriteJobInResults] [<CommonParameters>]

Receive-Job [-Job] <Job[]> [[-ComputerName] <string[]>] [-Keep] [-NoRecurse] [-Force] [-Wait] [-AutoRemoveJob] [-WriteEvents] [-WriteJobInResults] [<CommonParameters>]

Receive-Job [-Name] <string[]> [-Keep] [-NoRecurse] [-Force] [-Wait] [-AutoRemoveJob] [-WriteEvents] [-WriteJobInResults] [<CommonParameters>]

Receive-Job [-InstanceId] <guid[]> [-Keep] [-NoRecurse] [-Force] [-Wait] [-AutoRemoveJob] [-WriteEvents] [-WriteJobInResults] [<CommonParameters>]

Receive-Job [-Id] <int[]> [-Keep] [-NoRecurse] [-Force] [-Wait] [-AutoRemoveJob] [-WriteEvents] [-WriteJobInResults] [<CommonParameters>]
","ReadOnly",,"Receive","Job","System.Management.Automation.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Receive-Job","Cmdlet","Microsoft.PowerShell.Core","7.1.3.0","Public","Microsoft.PowerShell.Core",,"SupportedByCommand","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkId=528576",,,,"
Register-ArgumentCompleter -ParameterName <string> -ScriptBlock <scriptblock> [-CommandName <string[]>] [<CommonParameters>]

Register-ArgumentCompleter -CommandName <string[]> -ScriptBlock <scriptblock> [-Native] [<CommonParameters>]
","ReadOnly",,"Register","ArgumentCompleter","System.Management.Automation.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Register-ArgumentCompleter","Cmdlet","Microsoft.PowerShell.Core","7.1.3.0","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2097128",,,,"
Register-EngineEvent [-SourceIdentifier] <string> [[-Action] <scriptblock>] [-MessageData <psobject>] [-SupportEvent] [-Forward] [-MaxTriggerCount <int>] [<CommonParameters>]
","ReadOnly",,"Register","EngineEvent","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Register-EngineEvent","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096714",,,,"
Register-ObjectEvent [-InputObject] <psobject> [-EventName] <string> [[-SourceIdentifier] <string>] [[-Action] <scriptblock>] [-MessageData <psobject>] [-SupportEvent] [-Forward] [-MaxTriggerCount <int>] [<CommonParameters>]
","ReadOnly",,"Register","ObjectEvent","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Register-ObjectEvent","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,"__AllParameterSets","Register-PackageSource
","ReadOnly",,"Register","PackageSource",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Register-PackageSource","Cmdlet","PackageManagement","1.4.7","Public","PackageManagement","PackageManagement","PowerShell",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://docs.microsoft.com/powershell/module/microsoft.powershell.utility/remove-alias?view=powershell-7.1&WT.mc_id=ps-gethelp",,,"Default","
Remove-Alias [-Name] <string[]> [-Scope <string>] [-Force] [<CommonParameters>]
","ReadOnly",,"Remove","Alias","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-Alias","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096715",,,"BySource","
Remove-Event [-SourceIdentifier] <string> [-WhatIf] [-Confirm] [<CommonParameters>]

Remove-Event [-EventIdentifier] <int> [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"Remove","Event","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-Event","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2097103",,,"Path","
Remove-Item [-Path] <string[]> [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Recurse] [-Force] [-Credential <pscredential>] [-WhatIf] [-Confirm] [<CommonParameters>]

Remove-Item -LiteralPath <string[]> [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Recurse] [-Force] [-Credential <pscredential>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"Remove","Item","Microsoft.PowerShell.Commands.Management.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-Item","Cmdlet","Microsoft.PowerShell.Management","7.0.0.0","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2097013",,,"Path","
Remove-ItemProperty [-Path] <string[]> [-Name] <string[]> [-Force] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Credential <pscredential>] [-WhatIf] [-Confirm] [<CommonParameters>]

Remove-ItemProperty [-Name] <string[]> -LiteralPath <string[]> [-Force] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Credential <pscredential>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"Remove","ItemProperty","Microsoft.PowerShell.Commands.Management.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-ItemProperty","Cmdlet","Microsoft.PowerShell.Management","7.0.0.0","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096868",,,"SessionIdParameterSet","
Remove-Job [-Id] <int[]> [-Force] [-WhatIf] [-Confirm] [<CommonParameters>]

Remove-Job [-Job] <Job[]> [-Force] [-WhatIf] [-Confirm] [<CommonParameters>]

Remove-Job [-Name] <string[]> [-Force] [-WhatIf] [-Confirm] [<CommonParameters>]

Remove-Job [-InstanceId] <guid[]> [-Force] [-WhatIf] [-Confirm] [<CommonParameters>]

Remove-Job [-Filter] <hashtable> [-Force] [-WhatIf] [-Confirm] [<CommonParameters>]

Remove-Job [-State] <JobState> [-WhatIf] [-Confirm] [<CommonParameters>]

Remove-Job [-Command <string[]>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"Remove","Job","System.Management.Automation.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-Job","Cmdlet","Microsoft.PowerShell.Core","7.1.3.0","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096802",,,,"
Remove-Module [-Name] <string[]> [-Force] [-WhatIf] [-Confirm] [<CommonParameters>]

Remove-Module [-FullyQualifiedName] <ModuleSpecification[]> [-Force] [-WhatIf] [-Confirm] [<CommonParameters>]

Remove-Module [-ModuleInfo] <psmoduleinfo[]> [-Force] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"Remove","Module","System.Management.Automation.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-Module","Cmdlet","Microsoft.PowerShell.Core","7.1.3.0","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2097134",,,"Breakpoint","
Remove-PSBreakpoint [-Breakpoint] <Breakpoint[]> [-WhatIf] [-Confirm] [<CommonParameters>]

Remove-PSBreakpoint [-Id] <int[]> [-Runspace <runspace>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"Remove","PSBreakpoint","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-PSBreakpoint","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2097050",,,"Name","
Remove-PSDrive [-Name] <string[]> [-PSProvider <string[]>] [-Scope <string>] [-Force] [-WhatIf] [-Confirm] [<CommonParameters>]

Remove-PSDrive [-LiteralName] <string[]> [-PSProvider <string[]>] [-Scope <string>] [-Force] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"Remove","PSDrive","Microsoft.PowerShell.Commands.Management.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-PSDrive","Cmdlet","Microsoft.PowerShell.Management","7.0.0.0","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkId=528809",,,,"
Remove-PSReadLineKeyHandler [-Chord] <string[]> [-ViMode <ViMode>] [<CommonParameters>]
","ReadOnly",,"Remove","PSReadLineKeyHandler","Microsoft.PowerShell.PSReadLine2.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-PSReadLineKeyHandler","Cmdlet","PSReadLine","2.1.0","Public","PSReadLine","PSReadLine","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096963",,,"Id","
Remove-PSSession [-Id] <int[]> [-WhatIf] [-Confirm] [<CommonParameters>]

Remove-PSSession [-Session] <PSSession[]> [-WhatIf] [-Confirm] [<CommonParameters>]

Remove-PSSession -ContainerId <string[]> [-WhatIf] [-Confirm] [<CommonParameters>]

Remove-PSSession -VMId <guid[]> [-WhatIf] [-Confirm] [<CommonParameters>]

Remove-PSSession -VMName <string[]> [-WhatIf] [-Confirm] [<CommonParameters>]

Remove-PSSession -InstanceId <guid[]> [-WhatIf] [-Confirm] [<CommonParameters>]

Remove-PSSession -Name <string[]> [-WhatIf] [-Confirm] [<CommonParameters>]

Remove-PSSession [-ComputerName] <string[]> [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"Remove","PSSession","System.Management.Automation.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-PSSession","Cmdlet","Microsoft.PowerShell.Core","7.1.3.0","Public","Microsoft.PowerShell.Core",,"OwnedByCommand","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096622",,,"RemoveTypeDataSet","
Remove-TypeData -TypeData <TypeData> [-WhatIf] [-Confirm] [<CommonParameters>]

Remove-TypeData [-TypeName] <string> [-WhatIf] [-Confirm] [<CommonParameters>]

Remove-TypeData -Path <string[]> [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"Remove","TypeData","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-TypeData","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2097123",,,,"
Remove-Variable [-Name] <string[]> [-Include <string[]>] [-Exclude <string[]>] [-Force] [-Scope <string>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"Remove","Variable","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Remove-Variable","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2097153",,,"ByPath","
Rename-Item [-Path] <string> [-NewName] <string> [-Force] [-PassThru] [-Credential <pscredential>] [-WhatIf] [-Confirm] [<CommonParameters>]

Rename-Item [-NewName] <string> -LiteralPath <string> [-Force] [-PassThru] [-Credential <pscredential>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"Rename","Item","Microsoft.PowerShell.Commands.Management.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Rename-Item","Cmdlet","Microsoft.PowerShell.Management","7.0.0.0","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2097152",,,"Path","
Rename-ItemProperty [-Path] <string> [-Name] <string> [-NewName] <string> [-PassThru] [-Force] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Credential <pscredential>] [-WhatIf] [-Confirm] [<CommonParameters>]

Rename-ItemProperty [-Name] <string> [-NewName] <string> -LiteralPath <string> [-PassThru] [-Force] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Credential <pscredential>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"Rename","ItemProperty","Microsoft.PowerShell.Commands.Management.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Rename-ItemProperty","Cmdlet","Microsoft.PowerShell.Management","7.0.0.0","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2097143",,,"Path","
Resolve-Path [-Path] <string[]> [-Relative] [-Credential <pscredential>] [<CommonParameters>]

Resolve-Path -LiteralPath <string[]> [-Relative] [-Credential <pscredential>] [<CommonParameters>]
","ReadOnly",,"Resolve","Path","Microsoft.PowerShell.Commands.Management.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Resolve-Path","Cmdlet","Microsoft.PowerShell.Management","7.0.0.0","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2097060",,,,"
Restart-Computer [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"Restart","Computer","Microsoft.PowerShell.Commands.Management.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Restart-Computer","Cmdlet","Microsoft.PowerShell.Management","7.0.0.0","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","SupportedByCommand","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096794",,,"Path","
Save-Help [-DestinationPath] <string[]> [[-Module] <psmoduleinfo[]>] [[-UICulture] <cultureinfo[]>] [-FullyQualifiedModule <ModuleSpecification[]>] [-Credential <pscredential>] [-UseDefaultCredentials] [-Force] [-Scope <UpdateHelpScope>] [<CommonParameters>]

Save-Help [[-Module] <psmoduleinfo[]>] [[-UICulture] <cultureinfo[]>] -LiteralPath <string[]> [-FullyQualifiedModule <ModuleSpecification[]>] [-Credential <pscredential>] [-UseDefaultCredentials] [-Force] [-Scope <UpdateHelpScope>] [<CommonParameters>]
","ReadOnly",,"Save","Help","System.Management.Automation.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Save-Help","Cmdlet","Microsoft.PowerShell.Core","7.1.3.0","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,"__AllParameterSets","Save-Package
","ReadOnly",,"Save","Package",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Save-Package","Cmdlet","PackageManagement","1.4.7","Public","PackageManagement","PackageManagement","PowerShell",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096716",,,"DefaultParameter","
Select-Object [[-Property] <Object[]>] [-InputObject <psobject>] [-ExcludeProperty <string[]>] [-ExpandProperty <string>] [-Unique] [-Last <int>] [-First <int>] [-Skip <int>] [-Wait] [<CommonParameters>]

Select-Object [[-Property] <Object[]>] [-InputObject <psobject>] [-ExcludeProperty <string[]>] [-ExpandProperty <string>] [-Unique] [-SkipLast <int>] [<CommonParameters>]

Select-Object [-InputObject <psobject>] [-Unique] [-Wait] [-Index <int[]>] [<CommonParameters>]

Select-Object [-InputObject <psobject>] [-Unique] [-SkipIndex <int[]>] [<CommonParameters>]
","ReadOnly",,"Select","Object","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Select-Object","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2097119",,,"File","
Select-String [-Pattern] <string[]> [-Path] <string[]> [-Culture <string>] [-SimpleMatch] [-CaseSensitive] [-Quiet] [-List] [-NoEmphasis] [-Include <string[]>] [-Exclude <string[]>] [-NotMatch] [-AllMatches] [-Encoding <Encoding>] [-Context <int[]>] [<CommonParameters>]

Select-String [-Pattern] <string[]> -InputObject <psobject> -Raw [-Culture <string>] [-SimpleMatch] [-CaseSensitive] [-List] [-NoEmphasis] [-Include <string[]>] [-Exclude <string[]>] [-NotMatch] [-AllMatches] [-Encoding <Encoding>] [-Context <int[]>] [<CommonParameters>]

Select-String [-Pattern] <string[]> -InputObject <psobject> [-Culture <string>] [-SimpleMatch] [-CaseSensitive] [-Quiet] [-List] [-NoEmphasis] [-Include <string[]>] [-Exclude <string[]>] [-NotMatch] [-AllMatches] [-Encoding <Encoding>] [-Context <int[]>] [<CommonParameters>]

Select-String [-Pattern] <string[]> [-Path] <string[]> -Raw [-Culture <string>] [-SimpleMatch] [-CaseSensitive] [-List] [-NoEmphasis] [-Include <string[]>] [-Exclude <string[]>] [-NotMatch] [-AllMatches] [-Encoding <Encoding>] [-Context <int[]>] [<CommonParameters>]

Select-String [-Pattern] <string[]> -LiteralPath <string[]> -Raw [-Culture <string>] [-SimpleMatch] [-CaseSensitive] [-List] [-NoEmphasis] [-Include <string[]>] [-Exclude <string[]>] [-NotMatch] [-AllMatches] [-Encoding <Encoding>] [-Context <int[]>] [<CommonParameters>]

Select-String [-Pattern] <string[]> -LiteralPath <string[]> [-Culture <string>] [-SimpleMatch] [-CaseSensitive] [-Quiet] [-List] [-NoEmphasis] [-Include <string[]>] [-Exclude <string[]>] [-NotMatch] [-AllMatches] [-Encoding <Encoding>] [-Context <int[]>] [<CommonParameters>]
","ReadOnly",,"Select","String","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Select-String","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2097031",,,"Xml","
Select-Xml [-XPath] <string> [-Xml] <XmlNode[]> [-Namespace <hashtable>] [<CommonParameters>]

Select-Xml [-XPath] <string> [-Path] <string[]> [-Namespace <hashtable>] [<CommonParameters>]

Select-Xml [-XPath] <string> -LiteralPath <string[]> [-Namespace <hashtable>] [<CommonParameters>]

Select-Xml [-XPath] <string> -Content <string[]> [-Namespace <hashtable>] [<CommonParameters>]
","ReadOnly",,"Select","Xml","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Select-Xml","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2097115",,,,"
Send-MailMessage [-To] <string[]> [[-Subject] <string>] [[-Body] <string>] [[-SmtpServer] <string>] -From <string> [-Attachments <string[]>] [-Bcc <string[]>] [-BodyAsHtml] [-Encoding <Encoding>] [-Cc <string[]>] [-DeliveryNotificationOption <DeliveryNotificationOptions>] [-Priority <MailPriority>] [-ReplyTo <string[]>] [-Credential <pscredential>] [-UseSsl] [-Port <int>] [<CommonParameters>]
","ReadOnly",,"Send","MailMessage","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Send-MailMessage","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096625",,,,"
Set-Alias [-Name] <string> [-Value] <string> [-Description <string>] [-Option <ScopedItemOptions>] [-PassThru] [-Scope <string>] [-Force] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"Set","Alias","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-Alias","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkId=2109826",,,,"
Set-Clipboard [-Value] <string[]> [-Append] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"Set","Clipboard","Microsoft.PowerShell.Commands.Management.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-Clipboard","Cmdlet","Microsoft.PowerShell.Management","7.0.0.0","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2097142",,,"Path","
Set-Content [-Path] <string[]> [-Value] <Object[]> [-PassThru] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Force] [-Credential <pscredential>] [-WhatIf] [-Confirm] [-NoNewline] [-Encoding <Encoding>] [-AsByteStream] [<CommonParameters>]

Set-Content [-Value] <Object[]> -LiteralPath <string[]> [-PassThru] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Force] [-Credential <pscredential>] [-WhatIf] [-Confirm] [-NoNewline] [-Encoding <Encoding>] [-AsByteStream] [<CommonParameters>]
","ReadOnly",,"Set","Content","Microsoft.PowerShell.Commands.Management.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-Content","Cmdlet","Microsoft.PowerShell.Management","7.0.0.0","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2097133",,,"Date","
Set-Date [-Date] <datetime> [-DisplayHint <DisplayHintType>] [-WhatIf] [-Confirm] [<CommonParameters>]

Set-Date [-Adjust] <timespan> [-DisplayHint <DisplayHintType>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"Set","Date","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-Date","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,"__AllParameterSets","Set-ExecutionPolicy
","ReadOnly",,"Set","ExecutionPolicy",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-ExecutionPolicy","Cmdlet","Microsoft.PowerShell.Security","7.0.0.0","Public","Microsoft.PowerShell.Security","Microsoft.PowerShell.Security","PowerShell",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2097055",,,"Path","
Set-Item [-Path] <string[]> [[-Value] <Object>] [-Force] [-PassThru] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Credential <pscredential>] [-WhatIf] [-Confirm] [<CommonParameters>]

Set-Item [[-Value] <Object>] -LiteralPath <string[]> [-Force] [-PassThru] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Credential <pscredential>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"Set","Item","Microsoft.PowerShell.Commands.Management.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-Item","Cmdlet","Microsoft.PowerShell.Management","7.0.0.0","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2097147",,,"propertyValuePathSet","
Set-ItemProperty [-Path] <string[]> [-Name] <string> [-Value] <Object> [-PassThru] [-Force] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Credential <pscredential>] [-WhatIf] [-Confirm] [<CommonParameters>]

Set-ItemProperty [-Path] <string[]> -InputObject <psobject> [-PassThru] [-Force] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Credential <pscredential>] [-WhatIf] [-Confirm] [<CommonParameters>]

Set-ItemProperty -LiteralPath <string[]> -InputObject <psobject> [-PassThru] [-Force] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Credential <pscredential>] [-WhatIf] [-Confirm] [<CommonParameters>]

Set-ItemProperty [-Name] <string> [-Value] <Object> -LiteralPath <string[]> [-PassThru] [-Force] [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-Credential <pscredential>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"Set","ItemProperty","Microsoft.PowerShell.Commands.Management.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-ItemProperty","Cmdlet","Microsoft.PowerShell.Management","7.0.0.0","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2097049",,,"Path","
Set-Location [[-Path] <string>] [-PassThru] [<CommonParameters>]

Set-Location -LiteralPath <string> [-PassThru] [<CommonParameters>]

Set-Location [-PassThru] [-StackName <string>] [<CommonParameters>]
","ReadOnly",,"Set","Location","Microsoft.PowerShell.Commands.Management.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-Location","Cmdlet","Microsoft.PowerShell.Management","7.0.0.0","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?linkid=2006265",,,"IndividualSetting","
Set-MarkdownOption [-Header1Color <string>] [-Header2Color <string>] [-Header3Color <string>] [-Header4Color <string>] [-Header5Color <string>] [-Header6Color <string>] [-Code <string>] [-ImageAltTextForegroundColor <string>] [-LinkForegroundColor <string>] [-ItalicsForegroundColor <string>] [-BoldForegroundColor <string>] [-PassThru] [<CommonParameters>]

Set-MarkdownOption -Theme <string> [-PassThru] [<CommonParameters>]

Set-MarkdownOption [-InputObject] <psobject> [-PassThru] [<CommonParameters>]
","ReadOnly",,"Set","MarkdownOption","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-MarkdownOption","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,"__AllParameterSets","Set-PackageSource
","ReadOnly",,"Set","PackageSource",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-PackageSource","Cmdlet","PackageManagement","1.4.7","Public","PackageManagement","PackageManagement","PowerShell",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096623",,,"Line","
Set-PSBreakpoint [-Script] <string[]> [-Line] <int[]> [[-Column] <int>] [-Action <scriptblock>] [<CommonParameters>]

Set-PSBreakpoint [[-Script] <string[]>] -Variable <string[]> [-Action <scriptblock>] [-Mode <VariableAccessMode>] [<CommonParameters>]

Set-PSBreakpoint [[-Script] <string[]>] -Command <string[]> [-Action <scriptblock>] [<CommonParameters>]
","ReadOnly",,"Set","PSBreakpoint","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-PSBreakpoint","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096959",,,,"
Set-PSDebug [-Trace <int>] [-Step] [-Strict] [<CommonParameters>]

Set-PSDebug [-Off] [<CommonParameters>]
","ReadOnly",,"Set","PSDebug","System.Management.Automation.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-PSDebug","Cmdlet","Microsoft.PowerShell.Core","7.1.3.0","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkId=528810",,,,"
Set-PSReadLineKeyHandler [-Chord] <string[]> [-ScriptBlock] <scriptblock> [-BriefDescription <string>] [-Description <string>] [-ViMode <ViMode>] [<CommonParameters>]

Set-PSReadLineKeyHandler [-Chord] <string[]> [-Function] <string> [-ViMode <ViMode>] [<CommonParameters>]
","ReadOnly",,"Set","PSReadLineKeyHandler","Microsoft.PowerShell.PSReadLine2.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-PSReadLineKeyHandler","Cmdlet","PSReadLine","2.1.0","Public","PSReadLine","PSReadLine","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkId=528811",,,,"
Set-PSReadLineOption [-EditMode <EditMode>] [-ContinuationPrompt <string>] [-HistoryNoDuplicates] [-AddToHistoryHandler <Func[string,Object]>] [-CommandValidationHandler <Action[CommandAst]>] [-HistorySearchCursorMovesToEnd] [-MaximumHistoryCount <int>] [-MaximumKillRingCount <int>] [-ShowToolTips] [-ExtraPromptLineCount <int>] [-DingTone <int>] [-DingDuration <int>] [-BellStyle <BellStyle>] [-CompletionQueryItems <int>] [-WordDelimiters <string>] [-HistorySearchCaseSensitive] [-HistorySaveStyle <HistorySaveStyle>] [-HistorySavePath <string>] [-AnsiEscapeTimeout <int>] [-PromptText <string[]>] [-ViModeIndicator <ViModeStyle>] [-ViModeChangeHandler <scriptblock>] [-PredictionSource <PredictionSource>] [-Colors <hashtable>] [<CommonParameters>]
","ReadOnly",,"Set","PSReadLineOption","Microsoft.PowerShell.PSReadLine2.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-PSReadLineOption","Cmdlet","PSReadLine","2.1.0","Public","PSReadLine","PSReadLine","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096804",,,"Version","
Set-StrictMode -Version <version> [<CommonParameters>]

Set-StrictMode -Off [<CommonParameters>]
","ReadOnly",,"Set","StrictMode","System.Management.Automation.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-StrictMode","Cmdlet","Microsoft.PowerShell.Core","7.1.3.0","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2097129",,,"optionsSet","
Set-TraceSource [-Name] <string[]> [[-Option] <PSTraceSourceOptions>] [-ListenerOption <TraceOptions>] [-FilePath <string>] [-Force] [-Debugger] [-PSHost] [-PassThru] [<CommonParameters>]

Set-TraceSource [-Name] <string[]> [-RemoveListener <string[]>] [<CommonParameters>]

Set-TraceSource [-Name] <string[]> [-RemoveFileListener <string[]>] [<CommonParameters>]
","ReadOnly",,"Set","TraceSource","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-TraceSource","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096624",,,,"
Set-Variable [-Name] <string[]> [[-Value] <Object>] [-Include <string[]>] [-Exclude <string[]>] [-Description <string>] [-Option <ScopedItemOptions>] [-Force] [-Visibility <SessionStateEntryVisibility>] [-PassThru] [-Scope <string>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"Set","Variable","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-Variable","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,"
Set-VSCodeHtmlContentView [-HtmlContentView] <IHtmlContentView> [-HtmlBodyContent] <string> [[-JavaScriptPaths] <string[]>] [[-StyleSheetPaths] <string[]>] [<CommonParameters>]
","ReadOnly",,"Set","VSCodeHtmlContentView","Microsoft.PowerShell.EditorServices.VSCode.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Set-VSCodeHtmlContentView","Cmdlet","PowerShellEditorServices.VSCode","0.2.0","Public","PowerShellEditorServices.VSCode","PowerShellEditorServices.VSCode","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?linkid=2102329",,,"Path","
Show-Markdown [-Path] <string[]> [-UseBrowser] [<CommonParameters>]

Show-Markdown -InputObject <psobject> [-UseBrowser] [<CommonParameters>]

Show-Markdown -LiteralPath <string[]> [-UseBrowser] [<CommonParameters>]
","ReadOnly",,"Show","Markdown","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Show-Markdown","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,"
Show-VSCodeHtmlContentView [-HtmlContentView] <IHtmlContentView> [[-ViewColumn] <ViewColumn>] [<CommonParameters>]
","ReadOnly",,"Show","VSCodeHtmlContentView","Microsoft.PowerShell.EditorServices.VSCode.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Show-VSCodeHtmlContentView","Cmdlet","PowerShellEditorServices.VSCode","0.2.0","Public","PowerShellEditorServices.VSCode","PowerShellEditorServices.VSCode","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2097038",,,"Default","
Sort-Object [[-Property] <Object[]>] [-Stable] [-Descending] [-Unique] [-InputObject <psobject>] [-Culture <string>] [-CaseSensitive] [<CommonParameters>]

Sort-Object [[-Property] <Object[]>] -Top <int> [-Descending] [-Unique] [-InputObject <psobject>] [-Culture <string>] [-CaseSensitive] [<CommonParameters>]

Sort-Object [[-Property] <Object[]>] -Bottom <int> [-Descending] [-Unique] [-InputObject <psobject>] [-Culture <string>] [-CaseSensitive] [<CommonParameters>]
","ReadOnly",,"Sort","Object","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Sort-Object","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2097149",,,"ParentSet","
Split-Path [-Path] <string[]> [-Parent] [-Resolve] [-Credential <pscredential>] [<CommonParameters>]

Split-Path [-Path] <string[]> -Qualifier [-Resolve] [-Credential <pscredential>] [<CommonParameters>]

Split-Path [-Path] <string[]> -Leaf [-Resolve] [-Credential <pscredential>] [<CommonParameters>]

Split-Path [-Path] <string[]> -LeafBase [-Resolve] [-Credential <pscredential>] [<CommonParameters>]

Split-Path [-Path] <string[]> -Extension [-Resolve] [-Credential <pscredential>] [<CommonParameters>]

Split-Path [-Path] <string[]> -NoQualifier [-Resolve] [-Credential <pscredential>] [<CommonParameters>]

Split-Path [-Path] <string[]> -IsAbsolute [-Resolve] [-Credential <pscredential>] [<CommonParameters>]

Split-Path -LiteralPath <string[]> [-Resolve] [-Credential <pscredential>] [<CommonParameters>]
","ReadOnly",,"Split","Path","Microsoft.PowerShell.Commands.Management.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Split-Path","Cmdlet","Microsoft.PowerShell.Management","7.0.0.0","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,"__AllParameterSets","Start-EditorServices
","ReadOnly",,"Start","EditorServices",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Start-EditorServices","Cmdlet","PowerShellEditorServices","2.4.5","Public","PowerShellEditorServices","PowerShellEditorServices","PowerShell",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096796",,,"ComputerName","
Start-Job [-ScriptBlock] <scriptblock> [[-InitializationScript] <scriptblock>] [-Name <string>] [-Credential <pscredential>] [-Authentication <AuthenticationMechanism>] [-WorkingDirectory <string>] [-RunAs32] [-PSVersion <version>] [-InputObject <psobject>] [-ArgumentList <Object[]>] [<CommonParameters>]

Start-Job [-DefinitionName] <string> [[-DefinitionPath] <string>] [[-Type] <string>] [-WorkingDirectory <string>] [<CommonParameters>]

Start-Job [-FilePath] <string> [[-InitializationScript] <scriptblock>] [-Name <string>] [-Credential <pscredential>] [-Authentication <AuthenticationMechanism>] [-WorkingDirectory <string>] [-RunAs32] [-PSVersion <version>] [-InputObject <psobject>] [-ArgumentList <Object[]>] [<CommonParameters>]

Start-Job [[-InitializationScript] <scriptblock>] -LiteralPath <string> [-Name <string>] [-Credential <pscredential>] [-Authentication <AuthenticationMechanism>] [-WorkingDirectory <string>] [-RunAs32] [-PSVersion <version>] [-InputObject <psobject>] [-ArgumentList <Object[]>] [<CommonParameters>]
","ReadOnly",,"Start","Job","System.Management.Automation.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Start-Job","Cmdlet","Microsoft.PowerShell.Core","7.1.3.0","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2097141",,,"Default","
Start-Process [-FilePath] <string> [[-ArgumentList] <string[]>] [-Credential <pscredential>] [-WorkingDirectory <string>] [-LoadUserProfile] [-NoNewWindow] [-PassThru] [-RedirectStandardError <string>] [-RedirectStandardInput <string>] [-RedirectStandardOutput <string>] [-WindowStyle <ProcessWindowStyle>] [-Wait] [-UseNewEnvironment] [-WhatIf] [-Confirm] [<CommonParameters>]

Start-Process [-FilePath] <string> [[-ArgumentList] <string[]>] [-WorkingDirectory <string>] [-PassThru] [-Verb <string>] [-WindowStyle <ProcessWindowStyle>] [-Wait] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"Start","Process","Microsoft.PowerShell.Commands.Management.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Start-Process","Cmdlet","Microsoft.PowerShell.Management","7.0.0.0","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2097041",,,"Seconds","
Start-Sleep [-Seconds] <double> [<CommonParameters>]

Start-Sleep -Milliseconds <int> [<CommonParameters>]
","ReadOnly",,"Start","Sleep","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Start-Sleep","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,"__AllParameterSets","Start-ThreadJob
","ReadOnly",,"Start","ThreadJob",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Start-ThreadJob","Cmdlet","ThreadJob","2.0.3","Public","ThreadJob","ThreadJob","PowerShell",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,"__AllParameterSets","Start-Transcript
","ReadOnly",,"Start","Transcript",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Start-Transcript","Cmdlet","Microsoft.PowerShell.Host","7.0.0.0","Public","Microsoft.PowerShell.Host","Microsoft.PowerShell.Host","PowerShell",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2097151",,,,"
Stop-Computer [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"Stop","Computer","Microsoft.PowerShell.Commands.Management.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Stop-Computer","Cmdlet","Microsoft.PowerShell.Management","7.0.0.0","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","SupportedByCommand","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096795",,,"SessionIdParameterSet","
Stop-Job [-Id] <int[]> [-PassThru] [-WhatIf] [-Confirm] [<CommonParameters>]

Stop-Job [-Job] <Job[]> [-PassThru] [-WhatIf] [-Confirm] [<CommonParameters>]

Stop-Job [-Name] <string[]> [-PassThru] [-WhatIf] [-Confirm] [<CommonParameters>]

Stop-Job [-InstanceId] <guid[]> [-PassThru] [-WhatIf] [-Confirm] [<CommonParameters>]

Stop-Job [-State] <JobState> [-PassThru] [-WhatIf] [-Confirm] [<CommonParameters>]

Stop-Job [-Filter] <hashtable> [-PassThru] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"Stop","Job","System.Management.Automation.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Stop-Job","Cmdlet","Microsoft.PowerShell.Core","7.1.3.0","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2097058",,,"Id","
Stop-Process [-Id] <int[]> [-PassThru] [-Force] [-WhatIf] [-Confirm] [<CommonParameters>]

Stop-Process -Name <string[]> [-PassThru] [-Force] [-WhatIf] [-Confirm] [<CommonParameters>]

Stop-Process [-InputObject] <Process[]> [-PassThru] [-Force] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"Stop","Process","Microsoft.PowerShell.Commands.Management.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Stop-Process","Cmdlet","Microsoft.PowerShell.Management","7.0.0.0","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,"__AllParameterSets","Stop-Transcript
","ReadOnly",,"Stop","Transcript",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Stop-Transcript","Cmdlet","Microsoft.PowerShell.Host","7.0.0.0","Public","Microsoft.PowerShell.Host","Microsoft.PowerShell.Host","PowerShell",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2097034",,,"File","
Tee-Object [-FilePath] <string> [-InputObject <psobject>] [-Append] [<CommonParameters>]

Tee-Object -LiteralPath <string> [-InputObject <psobject>] [<CommonParameters>]

Tee-Object -Variable <string> [-InputObject <psobject>] [<CommonParameters>]
","ReadOnly",,"Tee","Object","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Tee-Object","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2097144",,,"DefaultPing","
Test-Connection [-TargetName] <string[]> [-Ping] [-IPv4] [-IPv6] [-ResolveDestination] [-Source <string>] [-MaxHops <int>] [-Count <int>] [-Delay <int>] [-BufferSize <int>] [-DontFragment] [-Quiet] [-TimeoutSeconds <int>] [<CommonParameters>]

Test-Connection [-TargetName] <string[]> -Repeat [-Ping] [-IPv4] [-IPv6] [-ResolveDestination] [-Source <string>] [-MaxHops <int>] [-Delay <int>] [-BufferSize <int>] [-DontFragment] [-Quiet] [-TimeoutSeconds <int>] [<CommonParameters>]

Test-Connection [-TargetName] <string[]> -Traceroute [-IPv4] [-IPv6] [-ResolveDestination] [-Source <string>] [-MaxHops <int>] [-Quiet] [-TimeoutSeconds <int>] [<CommonParameters>]

Test-Connection [-TargetName] <string[]> -MtuSize [-IPv4] [-IPv6] [-ResolveDestination] [-Quiet] [-TimeoutSeconds <int>] [<CommonParameters>]

Test-Connection [-TargetName] <string[]> -TcpPort <int> [-IPv4] [-IPv6] [-ResolveDestination] [-Source <string>] [-Quiet] [-TimeoutSeconds <int>] [<CommonParameters>]
","ReadOnly",,"Test","Connection","Microsoft.PowerShell.Commands.Management.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Test-Connection","Cmdlet","Microsoft.PowerShell.Management","7.0.0.0","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096609",,,"__AllParameterSets","
Test-Json [-Json] <string> [<CommonParameters>]

Test-Json [-Json] <string> [[-Schema] <string>] [<CommonParameters>]

Test-Json [-Json] <string> [[-SchemaFile] <string>] [<CommonParameters>]
","ReadOnly",,"Test","Json","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Test-Json","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096900",,,,"
Test-ModuleManifest [-Path] <string> [<CommonParameters>]
","ReadOnly",,"Test","ModuleManifest","System.Management.Automation.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Test-ModuleManifest","Cmdlet","Microsoft.PowerShell.Core","7.1.3.0","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2097057",,,"Path","
Test-Path [-Path] <string[]> [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-PathType <TestPathType>] [-IsValid] [-Credential <pscredential>] [-OlderThan <datetime>] [-NewerThan <datetime>] [<CommonParameters>]

Test-Path -LiteralPath <string[]> [-Filter <string>] [-Include <string[]>] [-Exclude <string[]>] [-PathType <TestPathType>] [-IsValid] [-Credential <pscredential>] [-OlderThan <datetime>] [-NewerThan <datetime>] [<CommonParameters>]
","ReadOnly",,"Test","Path","Microsoft.PowerShell.Commands.Management.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Test-Path","Cmdlet","Microsoft.PowerShell.Management","7.0.0.0","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2097136",,,"expressionSet","
Trace-Command [-Name] <string[]> [-Expression] <scriptblock> [[-Option] <PSTraceSourceOptions>] [-InputObject <psobject>] [-ListenerOption <TraceOptions>] [-FilePath <string>] [-Force] [-Debugger] [-PSHost] [<CommonParameters>]

Trace-Command [-Name] <string[]> [-Command] <string> [[-Option] <PSTraceSourceOptions>] [-InputObject <psobject>] [-ArgumentList <Object[]>] [-ListenerOption <TraceOptions>] [-FilePath <string>] [-Force] [-Debugger] [-PSHost] [<CommonParameters>]
","ReadOnly",,"Trace","Command","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Trace-Command","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2097033",,,"ByPath","
Unblock-File [-Path] <string[]> [-WhatIf] [-Confirm] [<CommonParameters>]

Unblock-File -LiteralPath <string[]> [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"Unblock","File","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Unblock-File","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,"__AllParameterSets","Uninstall-Package
","ReadOnly",,"Uninstall","Package",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Uninstall-Package","Cmdlet","PackageManagement","1.4.7","Public","PackageManagement","PackageManagement","PowerShell",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,"__AllParameterSets","Unprotect-CmsMessage
","ReadOnly",,"Unprotect","CmsMessage",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Unprotect-CmsMessage","Cmdlet","Microsoft.PowerShell.Security","7.0.0.0","Public","Microsoft.PowerShell.Security","Microsoft.PowerShell.Security","PowerShell",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2097037",,,"BySource","
Unregister-Event [-SourceIdentifier] <string> [-Force] [-WhatIf] [-Confirm] [<CommonParameters>]

Unregister-Event [-SubscriptionId] <int> [-Force] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"Unregister","Event","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Unregister-Event","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,"__AllParameterSets","Unregister-PackageSource
","ReadOnly",,"Unregister","PackageSource",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Unregister-PackageSource","Cmdlet","PackageManagement","1.4.7","Public","PackageManagement","PackageManagement","PowerShell",,"System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2097135",,,"FileSet","
Update-FormatData [[-AppendPath] <string[]>] [-PrependPath <string[]>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"Update","FormatData","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Update-FormatData","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096805",,,"Path","
Update-Help [[-Module] <string[]>] [[-SourcePath] <string[]>] [[-UICulture] <cultureinfo[]>] [-FullyQualifiedModule <ModuleSpecification[]>] [-Recurse] [-Credential <pscredential>] [-UseDefaultCredentials] [-Force] [-Scope <UpdateHelpScope>] [-WhatIf] [-Confirm] [<CommonParameters>]

Update-Help [[-Module] <string[]>] [[-UICulture] <cultureinfo[]>] [-FullyQualifiedModule <ModuleSpecification[]>] [-LiteralPath <string[]>] [-Recurse] [-Credential <pscredential>] [-UseDefaultCredentials] [-Force] [-Scope <UpdateHelpScope>] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"Update","Help","System.Management.Automation.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Update-Help","Cmdlet","Microsoft.PowerShell.Core","7.1.3.0","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2109383",,,"AddRemoveSet","
Update-List [[-Property] <string>] [-Add <Object[]>] [-Remove <Object[]>] [-InputObject <psobject>] [<CommonParameters>]

Update-List [[-Property] <string>] -Replace <Object[]> [-InputObject <psobject>] [<CommonParameters>]
","ReadOnly",,"Update","List","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Update-List","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2097131",,,"FileSet","
Update-TypeData [[-AppendPath] <string[]>] [-PrependPath <string[]>] [-WhatIf] [-Confirm] [<CommonParameters>]

Update-TypeData -TypeName <string> [-MemberType <PSMemberTypes>] [-MemberName <string>] [-Value <Object>] [-SecondValue <Object>] [-TypeConverter <type>] [-TypeAdapter <type>] [-SerializationMethod <string>] [-TargetTypeForDeserialization <type>] [-SerializationDepth <int>] [-DefaultDisplayProperty <string>] [-InheritPropertySerializationSet <bool>] [-StringSerializationSource <string>] [-DefaultDisplayPropertySet <string[]>] [-DefaultKeyPropertySet <string[]>] [-PropertySerializationSet <string[]>] [-Force] [-WhatIf] [-Confirm] [<CommonParameters>]

Update-TypeData [-TypeData] <TypeData[]> [-Force] [-WhatIf] [-Confirm] [<CommonParameters>]
","ReadOnly",,"Update","TypeData","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Update-TypeData","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkId=2097035",,,,"
Wait-Debugger [<CommonParameters>]
","ReadOnly",,"Wait","Debugger","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Wait-Debugger","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2097042",,,,"
Wait-Event [[-SourceIdentifier] <string>] [-Timeout <int>] [<CommonParameters>]
","ReadOnly",,"Wait","Event","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Wait-Event","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096902",,,"SessionIdParameterSet","
Wait-Job [-Id] <int[]> [-Any] [-Timeout <int>] [-Force] [<CommonParameters>]

Wait-Job [-Job] <Job[]> [-Any] [-Timeout <int>] [-Force] [<CommonParameters>]

Wait-Job [-Name] <string[]> [-Any] [-Timeout <int>] [-Force] [<CommonParameters>]

Wait-Job [-InstanceId] <guid[]> [-Any] [-Timeout <int>] [-Force] [<CommonParameters>]

Wait-Job [-State] <JobState> [-Any] [-Timeout <int>] [-Force] [<CommonParameters>]

Wait-Job [-Filter] <hashtable> [-Any] [-Timeout <int>] [-Force] [<CommonParameters>]
","ReadOnly",,"Wait","Job","System.Management.Automation.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Wait-Job","Cmdlet","Microsoft.PowerShell.Core","7.1.3.0","Public","Microsoft.PowerShell.Core",,"PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2097146",,,"Name","
Wait-Process [-Name] <string[]> [[-Timeout] <int>] [<CommonParameters>]

Wait-Process [-Id] <int[]> [[-Timeout] <int>] [<CommonParameters>]

Wait-Process [[-Timeout] <int>] -InputObject <Process[]> [<CommonParameters>]
","ReadOnly",,"Wait","Process","Microsoft.PowerShell.Commands.Management.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Wait-Process","Cmdlet","Microsoft.PowerShell.Management","7.0.0.0","Public","Microsoft.PowerShell.Management","Microsoft.PowerShell.Management","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2096806",,,"EqualSet","
Where-Object [-Property] <string> [[-Value] <Object>] [-InputObject <psobject>] [-EQ] [<CommonParameters>]

Where-Object [-FilterScript] <scriptblock> [-InputObject <psobject>] [<CommonParameters>]

Where-Object [-Property] <string> [[-Value] <Object>] -GE [-InputObject <psobject>] [<CommonParameters>]

Where-Object [-Property] <string> [[-Value] <Object>] -CEQ [-InputObject <psobject>] [<CommonParameters>]

Where-Object [-Property] <string> [[-Value] <Object>] -NE [-InputObject <psobject>] [<CommonParameters>]

Where-Object [-Property] <string> [[-Value] <Object>] -CNE [-InputObject <psobject>] [<CommonParameters>]

Where-Object [-Property] <string> [[-Value] <Object>] -GT [-InputObject <psobject>] [<CommonParameters>]

Where-Object [-Property] <string> [[-Value] <Object>] -CGT [-InputObject <psobject>] [<CommonParameters>]

Where-Object [-Property] <string> [[-Value] <Object>] -LT [-InputObject <psobject>] [<CommonParameters>]

Where-Object [-Property] <string> [[-Value] <Object>] -CLT [-InputObject <psobject>] [<CommonParameters>]

Where-Object [-Property] <string> [[-Value] <Object>] -CGE [-InputObject <psobject>] [<CommonParameters>]

Where-Object [-Property] <string> [[-Value] <Object>] -LE [-InputObject <psobject>] [<CommonParameters>]

Where-Object [-Property] <string> [[-Value] <Object>] -CLE [-InputObject <psobject>] [<CommonParameters>]

Where-Object [-Property] <string> [[-Value] <Object>] -Like [-InputObject <psobject>] [<CommonParameters>]

Where-Object [-Property] <string> [[-Value] <Object>] -CLike [-InputObject <psobject>] [<CommonParameters>]

Where-Object [-Property] <string> [[-Value] <Object>] -NotLike [-InputObject <psobject>] [<CommonParameters>]

Where-Object [-Property] <string> [[-Value] <Object>] -CNotLike [-InputObject <psobject>] [<CommonParameters>]

Where-Object [-Property] <string> [[-Value] <Object>] -Match [-InputObject <psobject>] [<CommonParameters>]

Where-Object [-Property] <string> [[-Value] <Object>] -CMatch [-InputObject <psobject>] [<CommonParameters>]

Where-Object [-Property] <string> [[-Value] <Object>] -NotMatch [-InputObject <psobject>] [<CommonParameters>]

Where-Object [-Property] <string> [[-Value] <Object>] -CNotMatch [-InputObject <psobject>] [<CommonParameters>]

Where-Object [-Property] <string> [[-Value] <Object>] -Contains [-InputObject <psobject>] [<CommonParameters>]

Where-Object [-Property] <string> [[-Value] <Object>] -CContains [-InputObject <psobject>] [<CommonParameters>]

Where-Object [-Property] <string> [[-Value] <Object>] -NotContains [-InputObject <psobject>] [<CommonParameters>]

Where-Object [-Property] <string> [[-Value] <Object>] -CNotContains [-InputObject <psobject>] [<CommonParameters>]

Where-Object [-Property] <string> [[-Value] <Object>] -In [-InputObject <psobject>] [<CommonParameters>]

Where-Object [-Property] <string> [[-Value] <Object>] -CIn [-InputObject <psobject>] [<CommonParameters>]

Where-Object [-Property] <string> [[-Value] <Object>] -NotIn [-InputObject <psobject>] [<CommonParameters>]

Where-Object [-Property] <string> [[-Value] <Object>] -CNotIn [-InputObject <psobject>] [<CommonParameters>]

Where-Object [-Property] <string> [[-Value] <Object>] -Is [-InputObject <psobject>] [<CommonParameters>]

Where-Object [-Property] <string> [[-Value] <Object>] -IsNot [-InputObject <psobject>] [<CommonParameters>]

Where-Object [-Property] <string> -Not [-InputObject <psobject>] [<CommonParameters>]
","ReadOnly",,"Where","Object","System.Management.Automation.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Where-Object","Cmdlet","Microsoft.PowerShell.Core","7.1.3.0","Public","Microsoft.PowerShell.Core",,"None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2097132",,,,"
Write-Debug [-Message] <string> [<CommonParameters>]
","ReadOnly",,"Write","Debug","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Write-Debug","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2097039",,,"NoException","
Write-Error [-Message] <string> [-Category <ErrorCategory>] [-ErrorId <string>] [-TargetObject <Object>] [-RecommendedAction <string>] [-CategoryActivity <string>] [-CategoryReason <string>] [-CategoryTargetName <string>] [-CategoryTargetType <string>] [<CommonParameters>]

Write-Error -Exception <Exception> [-Message <string>] [-Category <ErrorCategory>] [-ErrorId <string>] [-TargetObject <Object>] [-RecommendedAction <string>] [-CategoryActivity <string>] [-CategoryReason <string>] [-CategoryTargetName <string>] [-CategoryTargetType <string>] [<CommonParameters>]

Write-Error -ErrorRecord <ErrorRecord> [-RecommendedAction <string>] [-CategoryActivity <string>] [-CategoryReason <string>] [-CategoryTargetName <string>] [-CategoryTargetType <string>] [<CommonParameters>]
","ReadOnly",,"Write","Error","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Write-Error","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2097137",,,,"
Write-Host [[-Object] <Object>] [-NoNewline] [-Separator <Object>] [-ForegroundColor <ConsoleColor>] [-BackgroundColor <ConsoleColor>] [<CommonParameters>]
","ReadOnly",,"Write","Host","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Write-Host","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkId=2097040",,,,"
Write-Information [-MessageData] <Object> [[-Tags] <string[]>] [<CommonParameters>]
","ReadOnly",,"Write","Information","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Write-Information","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2097117",,,,"
Write-Output [-InputObject] <psobject> [-NoEnumerate] [<CommonParameters>]
","ReadOnly",,"Write","Output","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Write-Output","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2097036",,,,"
Write-Progress [-Activity] <string> [[-Status] <string>] [[-Id] <int>] [-PercentComplete <int>] [-SecondsRemaining <int>] [-CurrentOperation <string>] [-ParentId <int>] [-Completed] [-SourceId <int>] [<CommonParameters>]
","ReadOnly",,"Write","Progress","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Write-Progress","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2097043",,,,"
Write-Verbose [-Message] <string> [<CommonParameters>]
","ReadOnly",,"Write","Verbose","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Write-Verbose","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"",,,,"
Write-VSCodeHtmlContentView [-HtmlContentView] <IHtmlContentView> [-AppendedHtmlBodyContent] <string> [<CommonParameters>]
","ReadOnly",,"Write","VSCodeHtmlContentView","Microsoft.PowerShell.EditorServices.VSCode.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Write-VSCodeHtmlContentView","Cmdlet","PowerShellEditorServices.VSCode","0.2.0","Public","PowerShellEditorServices.VSCode","PowerShellEditorServices.VSCode","PowerShell","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
"https://go.microsoft.com/fwlink/?LinkID=2097044",,,,"
Write-Warning [-Message] <string> [<CommonParameters>]
","ReadOnly",,"Write","Warning","Microsoft.PowerShell.Commands.Utility.dll-Help.xml","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.PSTypeName]","Write-Warning","Cmdlet","Microsoft.PowerShell.Utility","7.0.0.0","Public","Microsoft.PowerShell.Utility","Microsoft.PowerShell.Utility","None","System.Collections.Generic.Dictionary`2[System.String,System.Management.Automation.ParameterMetadata]","System.Collections.ObjectModel.ReadOnlyCollection`1[System.Management.Automation.CommandParameterSetInfo]"
